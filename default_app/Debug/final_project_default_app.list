
final_project_default_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08004000  08004000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001430  080041a0  080041a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080055d0  080055d0  000025d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005624  08005624  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005624  08005624  00002624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800562c  0800562c  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800562c  0800562c  0000262c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005630  08005630  00002630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005634  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08005690  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08005690  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a01  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008c2  00000000  00000000  00004a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00005350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000159  00000000  00000000  00005550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fcf5  00000000  00000000  000056a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002e78  00000000  00000000  0001539e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005548d  00000000  00000000  00018216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006d6a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d80  00000000  00000000  0006d6e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0006e468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080041a0 <__do_global_dtors_aux>:
 80041a0:	b510      	push	{r4, lr}
 80041a2:	4c05      	ldr	r4, [pc, #20]	@ (80041b8 <__do_global_dtors_aux+0x18>)
 80041a4:	7823      	ldrb	r3, [r4, #0]
 80041a6:	b933      	cbnz	r3, 80041b6 <__do_global_dtors_aux+0x16>
 80041a8:	4b04      	ldr	r3, [pc, #16]	@ (80041bc <__do_global_dtors_aux+0x1c>)
 80041aa:	b113      	cbz	r3, 80041b2 <__do_global_dtors_aux+0x12>
 80041ac:	4804      	ldr	r0, [pc, #16]	@ (80041c0 <__do_global_dtors_aux+0x20>)
 80041ae:	f3af 8000 	nop.w
 80041b2:	2301      	movs	r3, #1
 80041b4:	7023      	strb	r3, [r4, #0]
 80041b6:	bd10      	pop	{r4, pc}
 80041b8:	2000005c 	.word	0x2000005c
 80041bc:	00000000 	.word	0x00000000
 80041c0:	080055b8 	.word	0x080055b8

080041c4 <frame_dummy>:
 80041c4:	b508      	push	{r3, lr}
 80041c6:	4b03      	ldr	r3, [pc, #12]	@ (80041d4 <frame_dummy+0x10>)
 80041c8:	b11b      	cbz	r3, 80041d2 <frame_dummy+0xe>
 80041ca:	4903      	ldr	r1, [pc, #12]	@ (80041d8 <frame_dummy+0x14>)
 80041cc:	4803      	ldr	r0, [pc, #12]	@ (80041dc <frame_dummy+0x18>)
 80041ce:	f3af 8000 	nop.w
 80041d2:	bd08      	pop	{r3, pc}
 80041d4:	00000000 	.word	0x00000000
 80041d8:	20000060 	.word	0x20000060
 80041dc:	080055b8 	.word	0x080055b8

080041e0 <memchr>:
 80041e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80041e4:	2a10      	cmp	r2, #16
 80041e6:	db2b      	blt.n	8004240 <memchr+0x60>
 80041e8:	f010 0f07 	tst.w	r0, #7
 80041ec:	d008      	beq.n	8004200 <memchr+0x20>
 80041ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80041f2:	3a01      	subs	r2, #1
 80041f4:	428b      	cmp	r3, r1
 80041f6:	d02d      	beq.n	8004254 <memchr+0x74>
 80041f8:	f010 0f07 	tst.w	r0, #7
 80041fc:	b342      	cbz	r2, 8004250 <memchr+0x70>
 80041fe:	d1f6      	bne.n	80041ee <memchr+0xe>
 8004200:	b4f0      	push	{r4, r5, r6, r7}
 8004202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8004206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800420a:	f022 0407 	bic.w	r4, r2, #7
 800420e:	f07f 0700 	mvns.w	r7, #0
 8004212:	2300      	movs	r3, #0
 8004214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004218:	3c08      	subs	r4, #8
 800421a:	ea85 0501 	eor.w	r5, r5, r1
 800421e:	ea86 0601 	eor.w	r6, r6, r1
 8004222:	fa85 f547 	uadd8	r5, r5, r7
 8004226:	faa3 f587 	sel	r5, r3, r7
 800422a:	fa86 f647 	uadd8	r6, r6, r7
 800422e:	faa5 f687 	sel	r6, r5, r7
 8004232:	b98e      	cbnz	r6, 8004258 <memchr+0x78>
 8004234:	d1ee      	bne.n	8004214 <memchr+0x34>
 8004236:	bcf0      	pop	{r4, r5, r6, r7}
 8004238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800423c:	f002 0207 	and.w	r2, r2, #7
 8004240:	b132      	cbz	r2, 8004250 <memchr+0x70>
 8004242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004246:	3a01      	subs	r2, #1
 8004248:	ea83 0301 	eor.w	r3, r3, r1
 800424c:	b113      	cbz	r3, 8004254 <memchr+0x74>
 800424e:	d1f8      	bne.n	8004242 <memchr+0x62>
 8004250:	2000      	movs	r0, #0
 8004252:	4770      	bx	lr
 8004254:	3801      	subs	r0, #1
 8004256:	4770      	bx	lr
 8004258:	2d00      	cmp	r5, #0
 800425a:	bf06      	itte	eq
 800425c:	4635      	moveq	r5, r6
 800425e:	3803      	subeq	r0, #3
 8004260:	3807      	subne	r0, #7
 8004262:	f015 0f01 	tst.w	r5, #1
 8004266:	d107      	bne.n	8004278 <memchr+0x98>
 8004268:	3001      	adds	r0, #1
 800426a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800426e:	bf02      	ittt	eq
 8004270:	3001      	addeq	r0, #1
 8004272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8004276:	3001      	addeq	r0, #1
 8004278:	bcf0      	pop	{r4, r5, r6, r7}
 800427a:	3801      	subs	r0, #1
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop

08004280 <led_init>:
#define LED_PIN		PIN5
#define PIN13		(1U<<13)
#define BTN_PIN		PIN13

void led_init(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8004284:	4b0b      	ldr	r3, [pc, #44]	@ (80042b4 <led_init+0x34>)
 8004286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004288:	4a0a      	ldr	r2, [pc, #40]	@ (80042b4 <led_init+0x34>)
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA5 mode to output mode*/
	GPIOA->MODER |=(1U<<10);
 8004290:	4b09      	ldr	r3, [pc, #36]	@ (80042b8 <led_init+0x38>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a08      	ldr	r2, [pc, #32]	@ (80042b8 <led_init+0x38>)
 8004296:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800429a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 800429c:	4b06      	ldr	r3, [pc, #24]	@ (80042b8 <led_init+0x38>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a05      	ldr	r2, [pc, #20]	@ (80042b8 <led_init+0x38>)
 80042a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042a6:	6013      	str	r3, [r2, #0]
}
 80042a8:	bf00      	nop
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	40023800 	.word	0x40023800
 80042b8:	40020000 	.word	0x40020000

080042bc <button_init>:
	GPIOA->ODR &=~LED_PIN;

}

void button_init(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
	/*Enable clock access to PORTC*/
	RCC->AHB1ENR |=GPIOCEN;
 80042c0:	4b0b      	ldr	r3, [pc, #44]	@ (80042f0 <button_init+0x34>)
 80042c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c4:	4a0a      	ldr	r2, [pc, #40]	@ (80042f0 <button_init+0x34>)
 80042c6:	f043 0304 	orr.w	r3, r3, #4
 80042ca:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PC13 as an input pin*/
	GPIOC->MODER &=~(1U<<26);
 80042cc:	4b09      	ldr	r3, [pc, #36]	@ (80042f4 <button_init+0x38>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a08      	ldr	r2, [pc, #32]	@ (80042f4 <button_init+0x38>)
 80042d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042d6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 80042d8:	4b06      	ldr	r3, [pc, #24]	@ (80042f4 <button_init+0x38>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a05      	ldr	r2, [pc, #20]	@ (80042f4 <button_init+0x38>)
 80042de:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80042e2:	6013      	str	r3, [r2, #0]

}
 80042e4:	bf00      	nop
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40023800 	.word	0x40023800
 80042f4:	40020800 	.word	0x40020800

080042f8 <enable_fpu>:
#include "stm32f4xx.h"



void enable_fpu(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 80042fc:	4b12      	ldr	r3, [pc, #72]	@ (8004348 <enable_fpu+0x50>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004302:	4a11      	ldr	r2, [pc, #68]	@ (8004348 <enable_fpu+0x50>)
 8004304:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004308:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<21);
 800430c:	4b0e      	ldr	r3, [pc, #56]	@ (8004348 <enable_fpu+0x50>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004312:	4a0d      	ldr	r2, [pc, #52]	@ (8004348 <enable_fpu+0x50>)
 8004314:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004318:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<22);
 800431c:	4b0a      	ldr	r3, [pc, #40]	@ (8004348 <enable_fpu+0x50>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004322:	4a09      	ldr	r2, [pc, #36]	@ (8004348 <enable_fpu+0x50>)
 8004324:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004328:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<23);
 800432c:	4b06      	ldr	r3, [pc, #24]	@ (8004348 <enable_fpu+0x50>)
 800432e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004332:	4a05      	ldr	r2, [pc, #20]	@ (8004348 <enable_fpu+0x50>)
 8004334:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004338:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

}
 800433c:	bf00      	nop
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	e000ed00 	.word	0xe000ed00

0800434c <main>:
#define  PIN5			(1U<<5)
#define  LED_PIN		PIN5

bool btn_state;
int main()
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
	/*Enable FPU*/
	enable_fpu();
 8004350:	f7ff ffd2 	bl	80042f8 <enable_fpu>

	/*Initialize debug UART*/
	sys_uart_init();
 8004354:	f000 f920 	bl	8004598 <sys_uart_init>

	/*Initialize timebase*/
	timebase_init();
 8004358:	f000 f8ca 	bl	80044f0 <timebase_init>

	/*Initialize LED*/
	led_init();
 800435c:	f7ff ff90 	bl	8004280 <led_init>

	/*Initialize Push button*/

	button_init();
 8004360:	f7ff ffac 	bl	80042bc <button_init>
	while(1)
	{
		printf("DEFAULT APP is running......\n\r");
 8004364:	4801      	ldr	r0, [pc, #4]	@ (800436c <main+0x20>)
 8004366:	f000 fabb 	bl	80048e0 <iprintf>
 800436a:	e7fb      	b.n	8004364 <main+0x18>
 800436c:	080055d0 	.word	0x080055d0

08004370 <SystemInit>:
	}
}


void SystemInit(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
	SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8004374:	4b03      	ldr	r3, [pc, #12]	@ (8004384 <SystemInit+0x14>)
 8004376:	4a04      	ldr	r2, [pc, #16]	@ (8004388 <SystemInit+0x18>)
 8004378:	609a      	str	r2, [r3, #8]
}
 800437a:	bf00      	nop
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	e000ed00 	.word	0xe000ed00
 8004388:	08004000 	.word	0x08004000

0800438c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	e00a      	b.n	80043b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800439e:	f3af 8000 	nop.w
 80043a2:	4601      	mov	r1, r0
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	60ba      	str	r2, [r7, #8]
 80043aa:	b2ca      	uxtb	r2, r1
 80043ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	3301      	adds	r3, #1
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	dbf0      	blt.n	800439e <_read+0x12>
  }

  return len;
 80043bc:	687b      	ldr	r3, [r7, #4]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b086      	sub	sp, #24
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e009      	b.n	80043ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	60ba      	str	r2, [r7, #8]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 f8cd 	bl	8004580 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	3301      	adds	r3, #1
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	dbf1      	blt.n	80043d8 <_write+0x12>
  }
  return len;
 80043f4:	687b      	ldr	r3, [r7, #4]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <_close>:

int _close(int file)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004406:	f04f 33ff 	mov.w	r3, #4294967295
}
 800440a:	4618      	mov	r0, r3
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004426:	605a      	str	r2, [r3, #4]
  return 0;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <_isatty>:

int _isatty(int file)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800443e:	2301      	movs	r3, #1
}
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
	...

08004468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004470:	4a14      	ldr	r2, [pc, #80]	@ (80044c4 <_sbrk+0x5c>)
 8004472:	4b15      	ldr	r3, [pc, #84]	@ (80044c8 <_sbrk+0x60>)
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800447c:	4b13      	ldr	r3, [pc, #76]	@ (80044cc <_sbrk+0x64>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d102      	bne.n	800448a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004484:	4b11      	ldr	r3, [pc, #68]	@ (80044cc <_sbrk+0x64>)
 8004486:	4a12      	ldr	r2, [pc, #72]	@ (80044d0 <_sbrk+0x68>)
 8004488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800448a:	4b10      	ldr	r3, [pc, #64]	@ (80044cc <_sbrk+0x64>)
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4413      	add	r3, r2
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	429a      	cmp	r2, r3
 8004496:	d207      	bcs.n	80044a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004498:	f000 fac6 	bl	8004a28 <__errno>
 800449c:	4603      	mov	r3, r0
 800449e:	220c      	movs	r2, #12
 80044a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044a2:	f04f 33ff 	mov.w	r3, #4294967295
 80044a6:	e009      	b.n	80044bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044a8:	4b08      	ldr	r3, [pc, #32]	@ (80044cc <_sbrk+0x64>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044ae:	4b07      	ldr	r3, [pc, #28]	@ (80044cc <_sbrk+0x64>)
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4413      	add	r3, r2
 80044b6:	4a05      	ldr	r2, [pc, #20]	@ (80044cc <_sbrk+0x64>)
 80044b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044ba:	68fb      	ldr	r3, [r7, #12]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3718      	adds	r7, #24
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	20018000 	.word	0x20018000
 80044c8:	00000400 	.word	0x00000400
 80044cc:	20000078 	.word	0x20000078
 80044d0:	200001d0 	.word	0x200001d0

080044d4 <tick_increment>:

	return g_curr_tick_p;

}
static void tick_increment(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 80044d8:	4b04      	ldr	r3, [pc, #16]	@ (80044ec <tick_increment+0x18>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3301      	adds	r3, #1
 80044de:	4a03      	ldr	r2, [pc, #12]	@ (80044ec <tick_increment+0x18>)
 80044e0:	6013      	str	r3, [r2, #0]
}
 80044e2:	bf00      	nop
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	2000007c 	.word	0x2000007c

080044f0 <timebase_init>:
void timebase_init(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044f4:	b672      	cpsid	i
}
 80044f6:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per second*/
	SysTick->LOAD =  ONE_MSEC_LOAD - 1;
 80044f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004534 <timebase_init+0x44>)
 80044fa:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80044fe:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 8004500:	4b0c      	ldr	r3, [pc, #48]	@ (8004534 <timebase_init+0x44>)
 8004502:	2200      	movs	r2, #0
 8004504:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 8004506:	4b0b      	ldr	r3, [pc, #44]	@ (8004534 <timebase_init+0x44>)
 8004508:	2204      	movs	r2, #4
 800450a:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 800450c:	4b09      	ldr	r3, [pc, #36]	@ (8004534 <timebase_init+0x44>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a08      	ldr	r2, [pc, #32]	@ (8004534 <timebase_init+0x44>)
 8004512:	f043 0302 	orr.w	r3, r3, #2
 8004516:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 8004518:	4b06      	ldr	r3, [pc, #24]	@ (8004534 <timebase_init+0x44>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a05      	ldr	r2, [pc, #20]	@ (8004534 <timebase_init+0x44>)
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004524:	b662      	cpsie	i
}
 8004526:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 8004528:	bf00      	nop
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	e000e010 	.word	0xe000e010

08004538 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
	tick_increment();
 800453c:	f7ff ffca 	bl	80044d4 <tick_increment>
}
 8004540:	bf00      	nop
 8004542:	bd80      	pop	{r7, pc}

08004544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800454e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004552:	2b00      	cmp	r3, #0
 8004554:	db0b      	blt.n	800456e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	f003 021f 	and.w	r2, r3, #31
 800455c:	4907      	ldr	r1, [pc, #28]	@ (800457c <__NVIC_EnableIRQ+0x38>)
 800455e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	2001      	movs	r0, #1
 8004566:	fa00 f202 	lsl.w	r2, r0, r2
 800456a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	e000e100 	.word	0xe000e100

08004580 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f87d 	bl	8004688 <uart_write>
	return ch;
 800458e:	687b      	ldr	r3, [r7, #4]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <sys_uart_init>:

void sys_uart_init(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 800459c:	4b36      	ldr	r3, [pc, #216]	@ (8004678 <sys_uart_init+0xe0>)
 800459e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a0:	4a35      	ldr	r2, [pc, #212]	@ (8004678 <sys_uart_init+0xe0>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 80045a8:	4b34      	ldr	r3, [pc, #208]	@ (800467c <sys_uart_init+0xe4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a33      	ldr	r2, [pc, #204]	@ (800467c <sys_uart_init+0xe4>)
 80045ae:	f023 0310 	bic.w	r3, r3, #16
 80045b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 80045b4:	4b31      	ldr	r3, [pc, #196]	@ (800467c <sys_uart_init+0xe4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a30      	ldr	r2, [pc, #192]	@ (800467c <sys_uart_init+0xe4>)
 80045ba:	f043 0320 	orr.w	r3, r3, #32
 80045be:	6013      	str	r3, [r2, #0]

	/*Set the mode of PA3 to alternate function mode*/
		GPIOA->MODER &=~(1U<<6);//
 80045c0:	4b2e      	ldr	r3, [pc, #184]	@ (800467c <sys_uart_init+0xe4>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a2d      	ldr	r2, [pc, #180]	@ (800467c <sys_uart_init+0xe4>)
 80045c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045ca:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |=(1U<<7);//
 80045cc:	4b2b      	ldr	r3, [pc, #172]	@ (800467c <sys_uart_init+0xe4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a2a      	ldr	r2, [pc, #168]	@ (800467c <sys_uart_init+0xe4>)
 80045d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045d6:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_RX)*/
		GPIOA->AFR[0] |=(1U<<12);//
 80045d8:	4b28      	ldr	r3, [pc, #160]	@ (800467c <sys_uart_init+0xe4>)
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	4a27      	ldr	r2, [pc, #156]	@ (800467c <sys_uart_init+0xe4>)
 80045de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80045e2:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |=(1U<<13);//
 80045e4:	4b25      	ldr	r3, [pc, #148]	@ (800467c <sys_uart_init+0xe4>)
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	4a24      	ldr	r2, [pc, #144]	@ (800467c <sys_uart_init+0xe4>)
 80045ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80045ee:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |=(1U<<14);//
 80045f0:	4b22      	ldr	r3, [pc, #136]	@ (800467c <sys_uart_init+0xe4>)
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	4a21      	ldr	r2, [pc, #132]	@ (800467c <sys_uart_init+0xe4>)
 80045f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045fa:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &=~(1U<<15);	//
 80045fc:	4b1f      	ldr	r3, [pc, #124]	@ (800467c <sys_uart_init+0xe4>)
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	4a1e      	ldr	r2, [pc, #120]	@ (800467c <sys_uart_init+0xe4>)
 8004602:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004606:	6213      	str	r3, [r2, #32]


	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 8004608:	4b1c      	ldr	r3, [pc, #112]	@ (800467c <sys_uart_init+0xe4>)
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	4a1b      	ldr	r2, [pc, #108]	@ (800467c <sys_uart_init+0xe4>)
 800460e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004612:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8004614:	4b19      	ldr	r3, [pc, #100]	@ (800467c <sys_uart_init+0xe4>)
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	4a18      	ldr	r2, [pc, #96]	@ (800467c <sys_uart_init+0xe4>)
 800461a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800461e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8004620:	4b16      	ldr	r3, [pc, #88]	@ (800467c <sys_uart_init+0xe4>)
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	4a15      	ldr	r2, [pc, #84]	@ (800467c <sys_uart_init+0xe4>)
 8004626:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800462a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 800462c:	4b13      	ldr	r3, [pc, #76]	@ (800467c <sys_uart_init+0xe4>)
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	4a12      	ldr	r2, [pc, #72]	@ (800467c <sys_uart_init+0xe4>)
 8004632:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004636:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 8004638:	4b0f      	ldr	r3, [pc, #60]	@ (8004678 <sys_uart_init+0xe0>)
 800463a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463c:	4a0e      	ldr	r2, [pc, #56]	@ (8004678 <sys_uart_init+0xe0>)
 800463e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004642:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 8004644:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8004648:	480d      	ldr	r0, [pc, #52]	@ (8004680 <sys_uart_init+0xe8>)
 800464a:	f000 f849 	bl	80046e0 <uart_set_baudrate>

	/*Configure transfer direction (tx and rx)*/
     USART2->CR1 = CR1_TE|CR1_RE;
 800464e:	4b0d      	ldr	r3, [pc, #52]	@ (8004684 <sys_uart_init+0xec>)
 8004650:	220c      	movs	r2, #12
 8004652:	60da      	str	r2, [r3, #12]

     //enable uart RX interrupt
     USART2->CR1 |= CR1_RXNEIE;
 8004654:	4b0b      	ldr	r3, [pc, #44]	@ (8004684 <sys_uart_init+0xec>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4a0a      	ldr	r2, [pc, #40]	@ (8004684 <sys_uart_init+0xec>)
 800465a:	f043 0320 	orr.w	r3, r3, #32
 800465e:	60d3      	str	r3, [r2, #12]

     //enable uart interrupt in nvic
     NVIC_EnableIRQ(USART2_IRQn);
 8004660:	2026      	movs	r0, #38	@ 0x26
 8004662:	f7ff ff6f 	bl	8004544 <__NVIC_EnableIRQ>

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 8004666:	4b07      	ldr	r3, [pc, #28]	@ (8004684 <sys_uart_init+0xec>)
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	4a06      	ldr	r2, [pc, #24]	@ (8004684 <sys_uart_init+0xec>)
 800466c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004670:	60d3      	str	r3, [r2, #12]
}
 8004672:	bf00      	nop
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40023800 	.word	0x40023800
 800467c:	40020000 	.word	0x40020000
 8004680:	00f42400 	.word	0x00f42400
 8004684:	40004400 	.word	0x40004400

08004688 <uart_write>:



static void uart_write(int ch)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8004690:	bf00      	nop
 8004692:	4b08      	ldr	r3, [pc, #32]	@ (80046b4 <uart_write+0x2c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f9      	beq.n	8004692 <uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a04      	ldr	r2, [pc, #16]	@ (80046b4 <uart_write+0x2c>)
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	6053      	str	r3, [r2, #4]
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40004400 	.word	0x40004400

080046b8 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	085a      	lsrs	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	441a      	add	r2, r3
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d0:	b29b      	uxth	r3, r3
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
	...

080046e0 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 80046ea:	6839      	ldr	r1, [r7, #0]
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff ffe3 	bl	80046b8 <compute_uart_bd>
 80046f2:	4603      	mov	r3, r0
 80046f4:	461a      	mov	r2, r3
 80046f6:	4b03      	ldr	r3, [pc, #12]	@ (8004704 <uart_set_baudrate+0x24>)
 80046f8:	609a      	str	r2, [r3, #8]
}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40004400 	.word	0x40004400

08004708 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004708:	480d      	ldr	r0, [pc, #52]	@ (8004740 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800470a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800470c:	f7ff fe30 	bl	8004370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004710:	480c      	ldr	r0, [pc, #48]	@ (8004744 <LoopForever+0x6>)
  ldr r1, =_edata
 8004712:	490d      	ldr	r1, [pc, #52]	@ (8004748 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004714:	4a0d      	ldr	r2, [pc, #52]	@ (800474c <LoopForever+0xe>)
  movs r3, #0
 8004716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004718:	e002      	b.n	8004720 <LoopCopyDataInit>

0800471a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800471a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800471c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800471e:	3304      	adds	r3, #4

08004720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004724:	d3f9      	bcc.n	800471a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004726:	4a0a      	ldr	r2, [pc, #40]	@ (8004750 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004728:	4c0a      	ldr	r4, [pc, #40]	@ (8004754 <LoopForever+0x16>)
  movs r3, #0
 800472a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800472c:	e001      	b.n	8004732 <LoopFillZerobss>

0800472e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800472e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004730:	3204      	adds	r2, #4

08004732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004734:	d3fb      	bcc.n	800472e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8004736:	f000 f97d 	bl	8004a34 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800473a:	f7ff fe07 	bl	800434c <main>

0800473e <LoopForever>:

LoopForever:
  b LoopForever
 800473e:	e7fe      	b.n	800473e <LoopForever>
  ldr   r0, =_estack
 8004740:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004748:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800474c:	08005634 	.word	0x08005634
  ldr r2, =_sbss
 8004750:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8004754:	200001cc 	.word	0x200001cc

08004758 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004758:	e7fe      	b.n	8004758 <ADC_IRQHandler>
	...

0800475c <std>:
 800475c:	2300      	movs	r3, #0
 800475e:	b510      	push	{r4, lr}
 8004760:	4604      	mov	r4, r0
 8004762:	e9c0 3300 	strd	r3, r3, [r0]
 8004766:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800476a:	6083      	str	r3, [r0, #8]
 800476c:	8181      	strh	r1, [r0, #12]
 800476e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004770:	81c2      	strh	r2, [r0, #14]
 8004772:	6183      	str	r3, [r0, #24]
 8004774:	4619      	mov	r1, r3
 8004776:	2208      	movs	r2, #8
 8004778:	305c      	adds	r0, #92	@ 0x5c
 800477a:	f000 f906 	bl	800498a <memset>
 800477e:	4b0d      	ldr	r3, [pc, #52]	@ (80047b4 <std+0x58>)
 8004780:	6263      	str	r3, [r4, #36]	@ 0x24
 8004782:	4b0d      	ldr	r3, [pc, #52]	@ (80047b8 <std+0x5c>)
 8004784:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004786:	4b0d      	ldr	r3, [pc, #52]	@ (80047bc <std+0x60>)
 8004788:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800478a:	4b0d      	ldr	r3, [pc, #52]	@ (80047c0 <std+0x64>)
 800478c:	6323      	str	r3, [r4, #48]	@ 0x30
 800478e:	4b0d      	ldr	r3, [pc, #52]	@ (80047c4 <std+0x68>)
 8004790:	6224      	str	r4, [r4, #32]
 8004792:	429c      	cmp	r4, r3
 8004794:	d006      	beq.n	80047a4 <std+0x48>
 8004796:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800479a:	4294      	cmp	r4, r2
 800479c:	d002      	beq.n	80047a4 <std+0x48>
 800479e:	33d0      	adds	r3, #208	@ 0xd0
 80047a0:	429c      	cmp	r4, r3
 80047a2:	d105      	bne.n	80047b0 <std+0x54>
 80047a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80047a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047ac:	f000 b966 	b.w	8004a7c <__retarget_lock_init_recursive>
 80047b0:	bd10      	pop	{r4, pc}
 80047b2:	bf00      	nop
 80047b4:	08004905 	.word	0x08004905
 80047b8:	08004927 	.word	0x08004927
 80047bc:	0800495f 	.word	0x0800495f
 80047c0:	08004983 	.word	0x08004983
 80047c4:	20000080 	.word	0x20000080

080047c8 <stdio_exit_handler>:
 80047c8:	4a02      	ldr	r2, [pc, #8]	@ (80047d4 <stdio_exit_handler+0xc>)
 80047ca:	4903      	ldr	r1, [pc, #12]	@ (80047d8 <stdio_exit_handler+0x10>)
 80047cc:	4803      	ldr	r0, [pc, #12]	@ (80047dc <stdio_exit_handler+0x14>)
 80047ce:	f000 b869 	b.w	80048a4 <_fwalk_sglue>
 80047d2:	bf00      	nop
 80047d4:	20000000 	.word	0x20000000
 80047d8:	08005319 	.word	0x08005319
 80047dc:	20000010 	.word	0x20000010

080047e0 <cleanup_stdio>:
 80047e0:	6841      	ldr	r1, [r0, #4]
 80047e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004814 <cleanup_stdio+0x34>)
 80047e4:	4299      	cmp	r1, r3
 80047e6:	b510      	push	{r4, lr}
 80047e8:	4604      	mov	r4, r0
 80047ea:	d001      	beq.n	80047f0 <cleanup_stdio+0x10>
 80047ec:	f000 fd94 	bl	8005318 <_fflush_r>
 80047f0:	68a1      	ldr	r1, [r4, #8]
 80047f2:	4b09      	ldr	r3, [pc, #36]	@ (8004818 <cleanup_stdio+0x38>)
 80047f4:	4299      	cmp	r1, r3
 80047f6:	d002      	beq.n	80047fe <cleanup_stdio+0x1e>
 80047f8:	4620      	mov	r0, r4
 80047fa:	f000 fd8d 	bl	8005318 <_fflush_r>
 80047fe:	68e1      	ldr	r1, [r4, #12]
 8004800:	4b06      	ldr	r3, [pc, #24]	@ (800481c <cleanup_stdio+0x3c>)
 8004802:	4299      	cmp	r1, r3
 8004804:	d004      	beq.n	8004810 <cleanup_stdio+0x30>
 8004806:	4620      	mov	r0, r4
 8004808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800480c:	f000 bd84 	b.w	8005318 <_fflush_r>
 8004810:	bd10      	pop	{r4, pc}
 8004812:	bf00      	nop
 8004814:	20000080 	.word	0x20000080
 8004818:	200000e8 	.word	0x200000e8
 800481c:	20000150 	.word	0x20000150

08004820 <global_stdio_init.part.0>:
 8004820:	b510      	push	{r4, lr}
 8004822:	4b0b      	ldr	r3, [pc, #44]	@ (8004850 <global_stdio_init.part.0+0x30>)
 8004824:	4c0b      	ldr	r4, [pc, #44]	@ (8004854 <global_stdio_init.part.0+0x34>)
 8004826:	4a0c      	ldr	r2, [pc, #48]	@ (8004858 <global_stdio_init.part.0+0x38>)
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	4620      	mov	r0, r4
 800482c:	2200      	movs	r2, #0
 800482e:	2104      	movs	r1, #4
 8004830:	f7ff ff94 	bl	800475c <std>
 8004834:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004838:	2201      	movs	r2, #1
 800483a:	2109      	movs	r1, #9
 800483c:	f7ff ff8e 	bl	800475c <std>
 8004840:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004844:	2202      	movs	r2, #2
 8004846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800484a:	2112      	movs	r1, #18
 800484c:	f7ff bf86 	b.w	800475c <std>
 8004850:	200001b8 	.word	0x200001b8
 8004854:	20000080 	.word	0x20000080
 8004858:	080047c9 	.word	0x080047c9

0800485c <__sfp_lock_acquire>:
 800485c:	4801      	ldr	r0, [pc, #4]	@ (8004864 <__sfp_lock_acquire+0x8>)
 800485e:	f000 b90e 	b.w	8004a7e <__retarget_lock_acquire_recursive>
 8004862:	bf00      	nop
 8004864:	200001c1 	.word	0x200001c1

08004868 <__sfp_lock_release>:
 8004868:	4801      	ldr	r0, [pc, #4]	@ (8004870 <__sfp_lock_release+0x8>)
 800486a:	f000 b909 	b.w	8004a80 <__retarget_lock_release_recursive>
 800486e:	bf00      	nop
 8004870:	200001c1 	.word	0x200001c1

08004874 <__sinit>:
 8004874:	b510      	push	{r4, lr}
 8004876:	4604      	mov	r4, r0
 8004878:	f7ff fff0 	bl	800485c <__sfp_lock_acquire>
 800487c:	6a23      	ldr	r3, [r4, #32]
 800487e:	b11b      	cbz	r3, 8004888 <__sinit+0x14>
 8004880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004884:	f7ff bff0 	b.w	8004868 <__sfp_lock_release>
 8004888:	4b04      	ldr	r3, [pc, #16]	@ (800489c <__sinit+0x28>)
 800488a:	6223      	str	r3, [r4, #32]
 800488c:	4b04      	ldr	r3, [pc, #16]	@ (80048a0 <__sinit+0x2c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f5      	bne.n	8004880 <__sinit+0xc>
 8004894:	f7ff ffc4 	bl	8004820 <global_stdio_init.part.0>
 8004898:	e7f2      	b.n	8004880 <__sinit+0xc>
 800489a:	bf00      	nop
 800489c:	080047e1 	.word	0x080047e1
 80048a0:	200001b8 	.word	0x200001b8

080048a4 <_fwalk_sglue>:
 80048a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048a8:	4607      	mov	r7, r0
 80048aa:	4688      	mov	r8, r1
 80048ac:	4614      	mov	r4, r2
 80048ae:	2600      	movs	r6, #0
 80048b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048b4:	f1b9 0901 	subs.w	r9, r9, #1
 80048b8:	d505      	bpl.n	80048c6 <_fwalk_sglue+0x22>
 80048ba:	6824      	ldr	r4, [r4, #0]
 80048bc:	2c00      	cmp	r4, #0
 80048be:	d1f7      	bne.n	80048b0 <_fwalk_sglue+0xc>
 80048c0:	4630      	mov	r0, r6
 80048c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048c6:	89ab      	ldrh	r3, [r5, #12]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d907      	bls.n	80048dc <_fwalk_sglue+0x38>
 80048cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048d0:	3301      	adds	r3, #1
 80048d2:	d003      	beq.n	80048dc <_fwalk_sglue+0x38>
 80048d4:	4629      	mov	r1, r5
 80048d6:	4638      	mov	r0, r7
 80048d8:	47c0      	blx	r8
 80048da:	4306      	orrs	r6, r0
 80048dc:	3568      	adds	r5, #104	@ 0x68
 80048de:	e7e9      	b.n	80048b4 <_fwalk_sglue+0x10>

080048e0 <iprintf>:
 80048e0:	b40f      	push	{r0, r1, r2, r3}
 80048e2:	b507      	push	{r0, r1, r2, lr}
 80048e4:	4906      	ldr	r1, [pc, #24]	@ (8004900 <iprintf+0x20>)
 80048e6:	ab04      	add	r3, sp, #16
 80048e8:	6808      	ldr	r0, [r1, #0]
 80048ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80048ee:	6881      	ldr	r1, [r0, #8]
 80048f0:	9301      	str	r3, [sp, #4]
 80048f2:	f000 f9e9 	bl	8004cc8 <_vfiprintf_r>
 80048f6:	b003      	add	sp, #12
 80048f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80048fc:	b004      	add	sp, #16
 80048fe:	4770      	bx	lr
 8004900:	2000000c 	.word	0x2000000c

08004904 <__sread>:
 8004904:	b510      	push	{r4, lr}
 8004906:	460c      	mov	r4, r1
 8004908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800490c:	f000 f868 	bl	80049e0 <_read_r>
 8004910:	2800      	cmp	r0, #0
 8004912:	bfab      	itete	ge
 8004914:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004916:	89a3      	ldrhlt	r3, [r4, #12]
 8004918:	181b      	addge	r3, r3, r0
 800491a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800491e:	bfac      	ite	ge
 8004920:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004922:	81a3      	strhlt	r3, [r4, #12]
 8004924:	bd10      	pop	{r4, pc}

08004926 <__swrite>:
 8004926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800492a:	461f      	mov	r7, r3
 800492c:	898b      	ldrh	r3, [r1, #12]
 800492e:	05db      	lsls	r3, r3, #23
 8004930:	4605      	mov	r5, r0
 8004932:	460c      	mov	r4, r1
 8004934:	4616      	mov	r6, r2
 8004936:	d505      	bpl.n	8004944 <__swrite+0x1e>
 8004938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800493c:	2302      	movs	r3, #2
 800493e:	2200      	movs	r2, #0
 8004940:	f000 f83c 	bl	80049bc <_lseek_r>
 8004944:	89a3      	ldrh	r3, [r4, #12]
 8004946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800494a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800494e:	81a3      	strh	r3, [r4, #12]
 8004950:	4632      	mov	r2, r6
 8004952:	463b      	mov	r3, r7
 8004954:	4628      	mov	r0, r5
 8004956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800495a:	f000 b853 	b.w	8004a04 <_write_r>

0800495e <__sseek>:
 800495e:	b510      	push	{r4, lr}
 8004960:	460c      	mov	r4, r1
 8004962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004966:	f000 f829 	bl	80049bc <_lseek_r>
 800496a:	1c43      	adds	r3, r0, #1
 800496c:	89a3      	ldrh	r3, [r4, #12]
 800496e:	bf15      	itete	ne
 8004970:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004972:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004976:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800497a:	81a3      	strheq	r3, [r4, #12]
 800497c:	bf18      	it	ne
 800497e:	81a3      	strhne	r3, [r4, #12]
 8004980:	bd10      	pop	{r4, pc}

08004982 <__sclose>:
 8004982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004986:	f000 b809 	b.w	800499c <_close_r>

0800498a <memset>:
 800498a:	4402      	add	r2, r0
 800498c:	4603      	mov	r3, r0
 800498e:	4293      	cmp	r3, r2
 8004990:	d100      	bne.n	8004994 <memset+0xa>
 8004992:	4770      	bx	lr
 8004994:	f803 1b01 	strb.w	r1, [r3], #1
 8004998:	e7f9      	b.n	800498e <memset+0x4>
	...

0800499c <_close_r>:
 800499c:	b538      	push	{r3, r4, r5, lr}
 800499e:	4d06      	ldr	r5, [pc, #24]	@ (80049b8 <_close_r+0x1c>)
 80049a0:	2300      	movs	r3, #0
 80049a2:	4604      	mov	r4, r0
 80049a4:	4608      	mov	r0, r1
 80049a6:	602b      	str	r3, [r5, #0]
 80049a8:	f7ff fd29 	bl	80043fe <_close>
 80049ac:	1c43      	adds	r3, r0, #1
 80049ae:	d102      	bne.n	80049b6 <_close_r+0x1a>
 80049b0:	682b      	ldr	r3, [r5, #0]
 80049b2:	b103      	cbz	r3, 80049b6 <_close_r+0x1a>
 80049b4:	6023      	str	r3, [r4, #0]
 80049b6:	bd38      	pop	{r3, r4, r5, pc}
 80049b8:	200001bc 	.word	0x200001bc

080049bc <_lseek_r>:
 80049bc:	b538      	push	{r3, r4, r5, lr}
 80049be:	4d07      	ldr	r5, [pc, #28]	@ (80049dc <_lseek_r+0x20>)
 80049c0:	4604      	mov	r4, r0
 80049c2:	4608      	mov	r0, r1
 80049c4:	4611      	mov	r1, r2
 80049c6:	2200      	movs	r2, #0
 80049c8:	602a      	str	r2, [r5, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	f7ff fd3e 	bl	800444c <_lseek>
 80049d0:	1c43      	adds	r3, r0, #1
 80049d2:	d102      	bne.n	80049da <_lseek_r+0x1e>
 80049d4:	682b      	ldr	r3, [r5, #0]
 80049d6:	b103      	cbz	r3, 80049da <_lseek_r+0x1e>
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	bd38      	pop	{r3, r4, r5, pc}
 80049dc:	200001bc 	.word	0x200001bc

080049e0 <_read_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	4d07      	ldr	r5, [pc, #28]	@ (8004a00 <_read_r+0x20>)
 80049e4:	4604      	mov	r4, r0
 80049e6:	4608      	mov	r0, r1
 80049e8:	4611      	mov	r1, r2
 80049ea:	2200      	movs	r2, #0
 80049ec:	602a      	str	r2, [r5, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	f7ff fccc 	bl	800438c <_read>
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	d102      	bne.n	80049fe <_read_r+0x1e>
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	b103      	cbz	r3, 80049fe <_read_r+0x1e>
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	bd38      	pop	{r3, r4, r5, pc}
 8004a00:	200001bc 	.word	0x200001bc

08004a04 <_write_r>:
 8004a04:	b538      	push	{r3, r4, r5, lr}
 8004a06:	4d07      	ldr	r5, [pc, #28]	@ (8004a24 <_write_r+0x20>)
 8004a08:	4604      	mov	r4, r0
 8004a0a:	4608      	mov	r0, r1
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	2200      	movs	r2, #0
 8004a10:	602a      	str	r2, [r5, #0]
 8004a12:	461a      	mov	r2, r3
 8004a14:	f7ff fcd7 	bl	80043c6 <_write>
 8004a18:	1c43      	adds	r3, r0, #1
 8004a1a:	d102      	bne.n	8004a22 <_write_r+0x1e>
 8004a1c:	682b      	ldr	r3, [r5, #0]
 8004a1e:	b103      	cbz	r3, 8004a22 <_write_r+0x1e>
 8004a20:	6023      	str	r3, [r4, #0]
 8004a22:	bd38      	pop	{r3, r4, r5, pc}
 8004a24:	200001bc 	.word	0x200001bc

08004a28 <__errno>:
 8004a28:	4b01      	ldr	r3, [pc, #4]	@ (8004a30 <__errno+0x8>)
 8004a2a:	6818      	ldr	r0, [r3, #0]
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	2000000c 	.word	0x2000000c

08004a34 <__libc_init_array>:
 8004a34:	b570      	push	{r4, r5, r6, lr}
 8004a36:	4d0d      	ldr	r5, [pc, #52]	@ (8004a6c <__libc_init_array+0x38>)
 8004a38:	4c0d      	ldr	r4, [pc, #52]	@ (8004a70 <__libc_init_array+0x3c>)
 8004a3a:	1b64      	subs	r4, r4, r5
 8004a3c:	10a4      	asrs	r4, r4, #2
 8004a3e:	2600      	movs	r6, #0
 8004a40:	42a6      	cmp	r6, r4
 8004a42:	d109      	bne.n	8004a58 <__libc_init_array+0x24>
 8004a44:	4d0b      	ldr	r5, [pc, #44]	@ (8004a74 <__libc_init_array+0x40>)
 8004a46:	4c0c      	ldr	r4, [pc, #48]	@ (8004a78 <__libc_init_array+0x44>)
 8004a48:	f000 fdb6 	bl	80055b8 <_init>
 8004a4c:	1b64      	subs	r4, r4, r5
 8004a4e:	10a4      	asrs	r4, r4, #2
 8004a50:	2600      	movs	r6, #0
 8004a52:	42a6      	cmp	r6, r4
 8004a54:	d105      	bne.n	8004a62 <__libc_init_array+0x2e>
 8004a56:	bd70      	pop	{r4, r5, r6, pc}
 8004a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a5c:	4798      	blx	r3
 8004a5e:	3601      	adds	r6, #1
 8004a60:	e7ee      	b.n	8004a40 <__libc_init_array+0xc>
 8004a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a66:	4798      	blx	r3
 8004a68:	3601      	adds	r6, #1
 8004a6a:	e7f2      	b.n	8004a52 <__libc_init_array+0x1e>
 8004a6c:	0800562c 	.word	0x0800562c
 8004a70:	0800562c 	.word	0x0800562c
 8004a74:	0800562c 	.word	0x0800562c
 8004a78:	08005630 	.word	0x08005630

08004a7c <__retarget_lock_init_recursive>:
 8004a7c:	4770      	bx	lr

08004a7e <__retarget_lock_acquire_recursive>:
 8004a7e:	4770      	bx	lr

08004a80 <__retarget_lock_release_recursive>:
 8004a80:	4770      	bx	lr
	...

08004a84 <_free_r>:
 8004a84:	b538      	push	{r3, r4, r5, lr}
 8004a86:	4605      	mov	r5, r0
 8004a88:	2900      	cmp	r1, #0
 8004a8a:	d041      	beq.n	8004b10 <_free_r+0x8c>
 8004a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a90:	1f0c      	subs	r4, r1, #4
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	bfb8      	it	lt
 8004a96:	18e4      	addlt	r4, r4, r3
 8004a98:	f000 f8e0 	bl	8004c5c <__malloc_lock>
 8004a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8004b14 <_free_r+0x90>)
 8004a9e:	6813      	ldr	r3, [r2, #0]
 8004aa0:	b933      	cbnz	r3, 8004ab0 <_free_r+0x2c>
 8004aa2:	6063      	str	r3, [r4, #4]
 8004aa4:	6014      	str	r4, [r2, #0]
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004aac:	f000 b8dc 	b.w	8004c68 <__malloc_unlock>
 8004ab0:	42a3      	cmp	r3, r4
 8004ab2:	d908      	bls.n	8004ac6 <_free_r+0x42>
 8004ab4:	6820      	ldr	r0, [r4, #0]
 8004ab6:	1821      	adds	r1, r4, r0
 8004ab8:	428b      	cmp	r3, r1
 8004aba:	bf01      	itttt	eq
 8004abc:	6819      	ldreq	r1, [r3, #0]
 8004abe:	685b      	ldreq	r3, [r3, #4]
 8004ac0:	1809      	addeq	r1, r1, r0
 8004ac2:	6021      	streq	r1, [r4, #0]
 8004ac4:	e7ed      	b.n	8004aa2 <_free_r+0x1e>
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	b10b      	cbz	r3, 8004ad0 <_free_r+0x4c>
 8004acc:	42a3      	cmp	r3, r4
 8004ace:	d9fa      	bls.n	8004ac6 <_free_r+0x42>
 8004ad0:	6811      	ldr	r1, [r2, #0]
 8004ad2:	1850      	adds	r0, r2, r1
 8004ad4:	42a0      	cmp	r0, r4
 8004ad6:	d10b      	bne.n	8004af0 <_free_r+0x6c>
 8004ad8:	6820      	ldr	r0, [r4, #0]
 8004ada:	4401      	add	r1, r0
 8004adc:	1850      	adds	r0, r2, r1
 8004ade:	4283      	cmp	r3, r0
 8004ae0:	6011      	str	r1, [r2, #0]
 8004ae2:	d1e0      	bne.n	8004aa6 <_free_r+0x22>
 8004ae4:	6818      	ldr	r0, [r3, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	6053      	str	r3, [r2, #4]
 8004aea:	4408      	add	r0, r1
 8004aec:	6010      	str	r0, [r2, #0]
 8004aee:	e7da      	b.n	8004aa6 <_free_r+0x22>
 8004af0:	d902      	bls.n	8004af8 <_free_r+0x74>
 8004af2:	230c      	movs	r3, #12
 8004af4:	602b      	str	r3, [r5, #0]
 8004af6:	e7d6      	b.n	8004aa6 <_free_r+0x22>
 8004af8:	6820      	ldr	r0, [r4, #0]
 8004afa:	1821      	adds	r1, r4, r0
 8004afc:	428b      	cmp	r3, r1
 8004afe:	bf04      	itt	eq
 8004b00:	6819      	ldreq	r1, [r3, #0]
 8004b02:	685b      	ldreq	r3, [r3, #4]
 8004b04:	6063      	str	r3, [r4, #4]
 8004b06:	bf04      	itt	eq
 8004b08:	1809      	addeq	r1, r1, r0
 8004b0a:	6021      	streq	r1, [r4, #0]
 8004b0c:	6054      	str	r4, [r2, #4]
 8004b0e:	e7ca      	b.n	8004aa6 <_free_r+0x22>
 8004b10:	bd38      	pop	{r3, r4, r5, pc}
 8004b12:	bf00      	nop
 8004b14:	200001c8 	.word	0x200001c8

08004b18 <sbrk_aligned>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	4e0f      	ldr	r6, [pc, #60]	@ (8004b58 <sbrk_aligned+0x40>)
 8004b1c:	460c      	mov	r4, r1
 8004b1e:	6831      	ldr	r1, [r6, #0]
 8004b20:	4605      	mov	r5, r0
 8004b22:	b911      	cbnz	r1, 8004b2a <sbrk_aligned+0x12>
 8004b24:	f000 fcb4 	bl	8005490 <_sbrk_r>
 8004b28:	6030      	str	r0, [r6, #0]
 8004b2a:	4621      	mov	r1, r4
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	f000 fcaf 	bl	8005490 <_sbrk_r>
 8004b32:	1c43      	adds	r3, r0, #1
 8004b34:	d103      	bne.n	8004b3e <sbrk_aligned+0x26>
 8004b36:	f04f 34ff 	mov.w	r4, #4294967295
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	bd70      	pop	{r4, r5, r6, pc}
 8004b3e:	1cc4      	adds	r4, r0, #3
 8004b40:	f024 0403 	bic.w	r4, r4, #3
 8004b44:	42a0      	cmp	r0, r4
 8004b46:	d0f8      	beq.n	8004b3a <sbrk_aligned+0x22>
 8004b48:	1a21      	subs	r1, r4, r0
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	f000 fca0 	bl	8005490 <_sbrk_r>
 8004b50:	3001      	adds	r0, #1
 8004b52:	d1f2      	bne.n	8004b3a <sbrk_aligned+0x22>
 8004b54:	e7ef      	b.n	8004b36 <sbrk_aligned+0x1e>
 8004b56:	bf00      	nop
 8004b58:	200001c4 	.word	0x200001c4

08004b5c <_malloc_r>:
 8004b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b60:	1ccd      	adds	r5, r1, #3
 8004b62:	f025 0503 	bic.w	r5, r5, #3
 8004b66:	3508      	adds	r5, #8
 8004b68:	2d0c      	cmp	r5, #12
 8004b6a:	bf38      	it	cc
 8004b6c:	250c      	movcc	r5, #12
 8004b6e:	2d00      	cmp	r5, #0
 8004b70:	4606      	mov	r6, r0
 8004b72:	db01      	blt.n	8004b78 <_malloc_r+0x1c>
 8004b74:	42a9      	cmp	r1, r5
 8004b76:	d904      	bls.n	8004b82 <_malloc_r+0x26>
 8004b78:	230c      	movs	r3, #12
 8004b7a:	6033      	str	r3, [r6, #0]
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c58 <_malloc_r+0xfc>
 8004b86:	f000 f869 	bl	8004c5c <__malloc_lock>
 8004b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b8e:	461c      	mov	r4, r3
 8004b90:	bb44      	cbnz	r4, 8004be4 <_malloc_r+0x88>
 8004b92:	4629      	mov	r1, r5
 8004b94:	4630      	mov	r0, r6
 8004b96:	f7ff ffbf 	bl	8004b18 <sbrk_aligned>
 8004b9a:	1c43      	adds	r3, r0, #1
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	d158      	bne.n	8004c52 <_malloc_r+0xf6>
 8004ba0:	f8d8 4000 	ldr.w	r4, [r8]
 8004ba4:	4627      	mov	r7, r4
 8004ba6:	2f00      	cmp	r7, #0
 8004ba8:	d143      	bne.n	8004c32 <_malloc_r+0xd6>
 8004baa:	2c00      	cmp	r4, #0
 8004bac:	d04b      	beq.n	8004c46 <_malloc_r+0xea>
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	4639      	mov	r1, r7
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	eb04 0903 	add.w	r9, r4, r3
 8004bb8:	f000 fc6a 	bl	8005490 <_sbrk_r>
 8004bbc:	4581      	cmp	r9, r0
 8004bbe:	d142      	bne.n	8004c46 <_malloc_r+0xea>
 8004bc0:	6821      	ldr	r1, [r4, #0]
 8004bc2:	1a6d      	subs	r5, r5, r1
 8004bc4:	4629      	mov	r1, r5
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	f7ff ffa6 	bl	8004b18 <sbrk_aligned>
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d03a      	beq.n	8004c46 <_malloc_r+0xea>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	442b      	add	r3, r5
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	bb62      	cbnz	r2, 8004c38 <_malloc_r+0xdc>
 8004bde:	f8c8 7000 	str.w	r7, [r8]
 8004be2:	e00f      	b.n	8004c04 <_malloc_r+0xa8>
 8004be4:	6822      	ldr	r2, [r4, #0]
 8004be6:	1b52      	subs	r2, r2, r5
 8004be8:	d420      	bmi.n	8004c2c <_malloc_r+0xd0>
 8004bea:	2a0b      	cmp	r2, #11
 8004bec:	d917      	bls.n	8004c1e <_malloc_r+0xc2>
 8004bee:	1961      	adds	r1, r4, r5
 8004bf0:	42a3      	cmp	r3, r4
 8004bf2:	6025      	str	r5, [r4, #0]
 8004bf4:	bf18      	it	ne
 8004bf6:	6059      	strne	r1, [r3, #4]
 8004bf8:	6863      	ldr	r3, [r4, #4]
 8004bfa:	bf08      	it	eq
 8004bfc:	f8c8 1000 	streq.w	r1, [r8]
 8004c00:	5162      	str	r2, [r4, r5]
 8004c02:	604b      	str	r3, [r1, #4]
 8004c04:	4630      	mov	r0, r6
 8004c06:	f000 f82f 	bl	8004c68 <__malloc_unlock>
 8004c0a:	f104 000b 	add.w	r0, r4, #11
 8004c0e:	1d23      	adds	r3, r4, #4
 8004c10:	f020 0007 	bic.w	r0, r0, #7
 8004c14:	1ac2      	subs	r2, r0, r3
 8004c16:	bf1c      	itt	ne
 8004c18:	1a1b      	subne	r3, r3, r0
 8004c1a:	50a3      	strne	r3, [r4, r2]
 8004c1c:	e7af      	b.n	8004b7e <_malloc_r+0x22>
 8004c1e:	6862      	ldr	r2, [r4, #4]
 8004c20:	42a3      	cmp	r3, r4
 8004c22:	bf0c      	ite	eq
 8004c24:	f8c8 2000 	streq.w	r2, [r8]
 8004c28:	605a      	strne	r2, [r3, #4]
 8004c2a:	e7eb      	b.n	8004c04 <_malloc_r+0xa8>
 8004c2c:	4623      	mov	r3, r4
 8004c2e:	6864      	ldr	r4, [r4, #4]
 8004c30:	e7ae      	b.n	8004b90 <_malloc_r+0x34>
 8004c32:	463c      	mov	r4, r7
 8004c34:	687f      	ldr	r7, [r7, #4]
 8004c36:	e7b6      	b.n	8004ba6 <_malloc_r+0x4a>
 8004c38:	461a      	mov	r2, r3
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	42a3      	cmp	r3, r4
 8004c3e:	d1fb      	bne.n	8004c38 <_malloc_r+0xdc>
 8004c40:	2300      	movs	r3, #0
 8004c42:	6053      	str	r3, [r2, #4]
 8004c44:	e7de      	b.n	8004c04 <_malloc_r+0xa8>
 8004c46:	230c      	movs	r3, #12
 8004c48:	6033      	str	r3, [r6, #0]
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	f000 f80c 	bl	8004c68 <__malloc_unlock>
 8004c50:	e794      	b.n	8004b7c <_malloc_r+0x20>
 8004c52:	6005      	str	r5, [r0, #0]
 8004c54:	e7d6      	b.n	8004c04 <_malloc_r+0xa8>
 8004c56:	bf00      	nop
 8004c58:	200001c8 	.word	0x200001c8

08004c5c <__malloc_lock>:
 8004c5c:	4801      	ldr	r0, [pc, #4]	@ (8004c64 <__malloc_lock+0x8>)
 8004c5e:	f7ff bf0e 	b.w	8004a7e <__retarget_lock_acquire_recursive>
 8004c62:	bf00      	nop
 8004c64:	200001c0 	.word	0x200001c0

08004c68 <__malloc_unlock>:
 8004c68:	4801      	ldr	r0, [pc, #4]	@ (8004c70 <__malloc_unlock+0x8>)
 8004c6a:	f7ff bf09 	b.w	8004a80 <__retarget_lock_release_recursive>
 8004c6e:	bf00      	nop
 8004c70:	200001c0 	.word	0x200001c0

08004c74 <__sfputc_r>:
 8004c74:	6893      	ldr	r3, [r2, #8]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	b410      	push	{r4}
 8004c7c:	6093      	str	r3, [r2, #8]
 8004c7e:	da08      	bge.n	8004c92 <__sfputc_r+0x1e>
 8004c80:	6994      	ldr	r4, [r2, #24]
 8004c82:	42a3      	cmp	r3, r4
 8004c84:	db01      	blt.n	8004c8a <__sfputc_r+0x16>
 8004c86:	290a      	cmp	r1, #10
 8004c88:	d103      	bne.n	8004c92 <__sfputc_r+0x1e>
 8004c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c8e:	f000 bb6b 	b.w	8005368 <__swbuf_r>
 8004c92:	6813      	ldr	r3, [r2, #0]
 8004c94:	1c58      	adds	r0, r3, #1
 8004c96:	6010      	str	r0, [r2, #0]
 8004c98:	7019      	strb	r1, [r3, #0]
 8004c9a:	4608      	mov	r0, r1
 8004c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <__sfputs_r>:
 8004ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca4:	4606      	mov	r6, r0
 8004ca6:	460f      	mov	r7, r1
 8004ca8:	4614      	mov	r4, r2
 8004caa:	18d5      	adds	r5, r2, r3
 8004cac:	42ac      	cmp	r4, r5
 8004cae:	d101      	bne.n	8004cb4 <__sfputs_r+0x12>
 8004cb0:	2000      	movs	r0, #0
 8004cb2:	e007      	b.n	8004cc4 <__sfputs_r+0x22>
 8004cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cb8:	463a      	mov	r2, r7
 8004cba:	4630      	mov	r0, r6
 8004cbc:	f7ff ffda 	bl	8004c74 <__sfputc_r>
 8004cc0:	1c43      	adds	r3, r0, #1
 8004cc2:	d1f3      	bne.n	8004cac <__sfputs_r+0xa>
 8004cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004cc8 <_vfiprintf_r>:
 8004cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ccc:	460d      	mov	r5, r1
 8004cce:	b09d      	sub	sp, #116	@ 0x74
 8004cd0:	4614      	mov	r4, r2
 8004cd2:	4698      	mov	r8, r3
 8004cd4:	4606      	mov	r6, r0
 8004cd6:	b118      	cbz	r0, 8004ce0 <_vfiprintf_r+0x18>
 8004cd8:	6a03      	ldr	r3, [r0, #32]
 8004cda:	b90b      	cbnz	r3, 8004ce0 <_vfiprintf_r+0x18>
 8004cdc:	f7ff fdca 	bl	8004874 <__sinit>
 8004ce0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ce2:	07d9      	lsls	r1, r3, #31
 8004ce4:	d405      	bmi.n	8004cf2 <_vfiprintf_r+0x2a>
 8004ce6:	89ab      	ldrh	r3, [r5, #12]
 8004ce8:	059a      	lsls	r2, r3, #22
 8004cea:	d402      	bmi.n	8004cf2 <_vfiprintf_r+0x2a>
 8004cec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004cee:	f7ff fec6 	bl	8004a7e <__retarget_lock_acquire_recursive>
 8004cf2:	89ab      	ldrh	r3, [r5, #12]
 8004cf4:	071b      	lsls	r3, r3, #28
 8004cf6:	d501      	bpl.n	8004cfc <_vfiprintf_r+0x34>
 8004cf8:	692b      	ldr	r3, [r5, #16]
 8004cfa:	b99b      	cbnz	r3, 8004d24 <_vfiprintf_r+0x5c>
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	4630      	mov	r0, r6
 8004d00:	f000 fb70 	bl	80053e4 <__swsetup_r>
 8004d04:	b170      	cbz	r0, 8004d24 <_vfiprintf_r+0x5c>
 8004d06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d08:	07dc      	lsls	r4, r3, #31
 8004d0a:	d504      	bpl.n	8004d16 <_vfiprintf_r+0x4e>
 8004d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d10:	b01d      	add	sp, #116	@ 0x74
 8004d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d16:	89ab      	ldrh	r3, [r5, #12]
 8004d18:	0598      	lsls	r0, r3, #22
 8004d1a:	d4f7      	bmi.n	8004d0c <_vfiprintf_r+0x44>
 8004d1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d1e:	f7ff feaf 	bl	8004a80 <__retarget_lock_release_recursive>
 8004d22:	e7f3      	b.n	8004d0c <_vfiprintf_r+0x44>
 8004d24:	2300      	movs	r3, #0
 8004d26:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d28:	2320      	movs	r3, #32
 8004d2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d32:	2330      	movs	r3, #48	@ 0x30
 8004d34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004ee4 <_vfiprintf_r+0x21c>
 8004d38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d3c:	f04f 0901 	mov.w	r9, #1
 8004d40:	4623      	mov	r3, r4
 8004d42:	469a      	mov	sl, r3
 8004d44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d48:	b10a      	cbz	r2, 8004d4e <_vfiprintf_r+0x86>
 8004d4a:	2a25      	cmp	r2, #37	@ 0x25
 8004d4c:	d1f9      	bne.n	8004d42 <_vfiprintf_r+0x7a>
 8004d4e:	ebba 0b04 	subs.w	fp, sl, r4
 8004d52:	d00b      	beq.n	8004d6c <_vfiprintf_r+0xa4>
 8004d54:	465b      	mov	r3, fp
 8004d56:	4622      	mov	r2, r4
 8004d58:	4629      	mov	r1, r5
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	f7ff ffa1 	bl	8004ca2 <__sfputs_r>
 8004d60:	3001      	adds	r0, #1
 8004d62:	f000 80a7 	beq.w	8004eb4 <_vfiprintf_r+0x1ec>
 8004d66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d68:	445a      	add	r2, fp
 8004d6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 809f 	beq.w	8004eb4 <_vfiprintf_r+0x1ec>
 8004d76:	2300      	movs	r3, #0
 8004d78:	f04f 32ff 	mov.w	r2, #4294967295
 8004d7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d80:	f10a 0a01 	add.w	sl, sl, #1
 8004d84:	9304      	str	r3, [sp, #16]
 8004d86:	9307      	str	r3, [sp, #28]
 8004d88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d8e:	4654      	mov	r4, sl
 8004d90:	2205      	movs	r2, #5
 8004d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d96:	4853      	ldr	r0, [pc, #332]	@ (8004ee4 <_vfiprintf_r+0x21c>)
 8004d98:	f7ff fa22 	bl	80041e0 <memchr>
 8004d9c:	9a04      	ldr	r2, [sp, #16]
 8004d9e:	b9d8      	cbnz	r0, 8004dd8 <_vfiprintf_r+0x110>
 8004da0:	06d1      	lsls	r1, r2, #27
 8004da2:	bf44      	itt	mi
 8004da4:	2320      	movmi	r3, #32
 8004da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004daa:	0713      	lsls	r3, r2, #28
 8004dac:	bf44      	itt	mi
 8004dae:	232b      	movmi	r3, #43	@ 0x2b
 8004db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004db4:	f89a 3000 	ldrb.w	r3, [sl]
 8004db8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dba:	d015      	beq.n	8004de8 <_vfiprintf_r+0x120>
 8004dbc:	9a07      	ldr	r2, [sp, #28]
 8004dbe:	4654      	mov	r4, sl
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	f04f 0c0a 	mov.w	ip, #10
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dcc:	3b30      	subs	r3, #48	@ 0x30
 8004dce:	2b09      	cmp	r3, #9
 8004dd0:	d94b      	bls.n	8004e6a <_vfiprintf_r+0x1a2>
 8004dd2:	b1b0      	cbz	r0, 8004e02 <_vfiprintf_r+0x13a>
 8004dd4:	9207      	str	r2, [sp, #28]
 8004dd6:	e014      	b.n	8004e02 <_vfiprintf_r+0x13a>
 8004dd8:	eba0 0308 	sub.w	r3, r0, r8
 8004ddc:	fa09 f303 	lsl.w	r3, r9, r3
 8004de0:	4313      	orrs	r3, r2
 8004de2:	9304      	str	r3, [sp, #16]
 8004de4:	46a2      	mov	sl, r4
 8004de6:	e7d2      	b.n	8004d8e <_vfiprintf_r+0xc6>
 8004de8:	9b03      	ldr	r3, [sp, #12]
 8004dea:	1d19      	adds	r1, r3, #4
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	9103      	str	r1, [sp, #12]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	bfbb      	ittet	lt
 8004df4:	425b      	neglt	r3, r3
 8004df6:	f042 0202 	orrlt.w	r2, r2, #2
 8004dfa:	9307      	strge	r3, [sp, #28]
 8004dfc:	9307      	strlt	r3, [sp, #28]
 8004dfe:	bfb8      	it	lt
 8004e00:	9204      	strlt	r2, [sp, #16]
 8004e02:	7823      	ldrb	r3, [r4, #0]
 8004e04:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e06:	d10a      	bne.n	8004e1e <_vfiprintf_r+0x156>
 8004e08:	7863      	ldrb	r3, [r4, #1]
 8004e0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e0c:	d132      	bne.n	8004e74 <_vfiprintf_r+0x1ac>
 8004e0e:	9b03      	ldr	r3, [sp, #12]
 8004e10:	1d1a      	adds	r2, r3, #4
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	9203      	str	r2, [sp, #12]
 8004e16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e1a:	3402      	adds	r4, #2
 8004e1c:	9305      	str	r3, [sp, #20]
 8004e1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004ef4 <_vfiprintf_r+0x22c>
 8004e22:	7821      	ldrb	r1, [r4, #0]
 8004e24:	2203      	movs	r2, #3
 8004e26:	4650      	mov	r0, sl
 8004e28:	f7ff f9da 	bl	80041e0 <memchr>
 8004e2c:	b138      	cbz	r0, 8004e3e <_vfiprintf_r+0x176>
 8004e2e:	9b04      	ldr	r3, [sp, #16]
 8004e30:	eba0 000a 	sub.w	r0, r0, sl
 8004e34:	2240      	movs	r2, #64	@ 0x40
 8004e36:	4082      	lsls	r2, r0
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	3401      	adds	r4, #1
 8004e3c:	9304      	str	r3, [sp, #16]
 8004e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e42:	4829      	ldr	r0, [pc, #164]	@ (8004ee8 <_vfiprintf_r+0x220>)
 8004e44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e48:	2206      	movs	r2, #6
 8004e4a:	f7ff f9c9 	bl	80041e0 <memchr>
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	d03f      	beq.n	8004ed2 <_vfiprintf_r+0x20a>
 8004e52:	4b26      	ldr	r3, [pc, #152]	@ (8004eec <_vfiprintf_r+0x224>)
 8004e54:	bb1b      	cbnz	r3, 8004e9e <_vfiprintf_r+0x1d6>
 8004e56:	9b03      	ldr	r3, [sp, #12]
 8004e58:	3307      	adds	r3, #7
 8004e5a:	f023 0307 	bic.w	r3, r3, #7
 8004e5e:	3308      	adds	r3, #8
 8004e60:	9303      	str	r3, [sp, #12]
 8004e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e64:	443b      	add	r3, r7
 8004e66:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e68:	e76a      	b.n	8004d40 <_vfiprintf_r+0x78>
 8004e6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e6e:	460c      	mov	r4, r1
 8004e70:	2001      	movs	r0, #1
 8004e72:	e7a8      	b.n	8004dc6 <_vfiprintf_r+0xfe>
 8004e74:	2300      	movs	r3, #0
 8004e76:	3401      	adds	r4, #1
 8004e78:	9305      	str	r3, [sp, #20]
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	f04f 0c0a 	mov.w	ip, #10
 8004e80:	4620      	mov	r0, r4
 8004e82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e86:	3a30      	subs	r2, #48	@ 0x30
 8004e88:	2a09      	cmp	r2, #9
 8004e8a:	d903      	bls.n	8004e94 <_vfiprintf_r+0x1cc>
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0c6      	beq.n	8004e1e <_vfiprintf_r+0x156>
 8004e90:	9105      	str	r1, [sp, #20]
 8004e92:	e7c4      	b.n	8004e1e <_vfiprintf_r+0x156>
 8004e94:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e98:	4604      	mov	r4, r0
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e7f0      	b.n	8004e80 <_vfiprintf_r+0x1b8>
 8004e9e:	ab03      	add	r3, sp, #12
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	462a      	mov	r2, r5
 8004ea4:	4b12      	ldr	r3, [pc, #72]	@ (8004ef0 <_vfiprintf_r+0x228>)
 8004ea6:	a904      	add	r1, sp, #16
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	f3af 8000 	nop.w
 8004eae:	4607      	mov	r7, r0
 8004eb0:	1c78      	adds	r0, r7, #1
 8004eb2:	d1d6      	bne.n	8004e62 <_vfiprintf_r+0x19a>
 8004eb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004eb6:	07d9      	lsls	r1, r3, #31
 8004eb8:	d405      	bmi.n	8004ec6 <_vfiprintf_r+0x1fe>
 8004eba:	89ab      	ldrh	r3, [r5, #12]
 8004ebc:	059a      	lsls	r2, r3, #22
 8004ebe:	d402      	bmi.n	8004ec6 <_vfiprintf_r+0x1fe>
 8004ec0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ec2:	f7ff fddd 	bl	8004a80 <__retarget_lock_release_recursive>
 8004ec6:	89ab      	ldrh	r3, [r5, #12]
 8004ec8:	065b      	lsls	r3, r3, #25
 8004eca:	f53f af1f 	bmi.w	8004d0c <_vfiprintf_r+0x44>
 8004ece:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ed0:	e71e      	b.n	8004d10 <_vfiprintf_r+0x48>
 8004ed2:	ab03      	add	r3, sp, #12
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	462a      	mov	r2, r5
 8004ed8:	4b05      	ldr	r3, [pc, #20]	@ (8004ef0 <_vfiprintf_r+0x228>)
 8004eda:	a904      	add	r1, sp, #16
 8004edc:	4630      	mov	r0, r6
 8004ede:	f000 f879 	bl	8004fd4 <_printf_i>
 8004ee2:	e7e4      	b.n	8004eae <_vfiprintf_r+0x1e6>
 8004ee4:	080055ef 	.word	0x080055ef
 8004ee8:	080055f9 	.word	0x080055f9
 8004eec:	00000000 	.word	0x00000000
 8004ef0:	08004ca3 	.word	0x08004ca3
 8004ef4:	080055f5 	.word	0x080055f5

08004ef8 <_printf_common>:
 8004ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004efc:	4616      	mov	r6, r2
 8004efe:	4698      	mov	r8, r3
 8004f00:	688a      	ldr	r2, [r1, #8]
 8004f02:	690b      	ldr	r3, [r1, #16]
 8004f04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	bfb8      	it	lt
 8004f0c:	4613      	movlt	r3, r2
 8004f0e:	6033      	str	r3, [r6, #0]
 8004f10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f14:	4607      	mov	r7, r0
 8004f16:	460c      	mov	r4, r1
 8004f18:	b10a      	cbz	r2, 8004f1e <_printf_common+0x26>
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	6033      	str	r3, [r6, #0]
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	0699      	lsls	r1, r3, #26
 8004f22:	bf42      	ittt	mi
 8004f24:	6833      	ldrmi	r3, [r6, #0]
 8004f26:	3302      	addmi	r3, #2
 8004f28:	6033      	strmi	r3, [r6, #0]
 8004f2a:	6825      	ldr	r5, [r4, #0]
 8004f2c:	f015 0506 	ands.w	r5, r5, #6
 8004f30:	d106      	bne.n	8004f40 <_printf_common+0x48>
 8004f32:	f104 0a19 	add.w	sl, r4, #25
 8004f36:	68e3      	ldr	r3, [r4, #12]
 8004f38:	6832      	ldr	r2, [r6, #0]
 8004f3a:	1a9b      	subs	r3, r3, r2
 8004f3c:	42ab      	cmp	r3, r5
 8004f3e:	dc26      	bgt.n	8004f8e <_printf_common+0x96>
 8004f40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f44:	6822      	ldr	r2, [r4, #0]
 8004f46:	3b00      	subs	r3, #0
 8004f48:	bf18      	it	ne
 8004f4a:	2301      	movne	r3, #1
 8004f4c:	0692      	lsls	r2, r2, #26
 8004f4e:	d42b      	bmi.n	8004fa8 <_printf_common+0xb0>
 8004f50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f54:	4641      	mov	r1, r8
 8004f56:	4638      	mov	r0, r7
 8004f58:	47c8      	blx	r9
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	d01e      	beq.n	8004f9c <_printf_common+0xa4>
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	6922      	ldr	r2, [r4, #16]
 8004f62:	f003 0306 	and.w	r3, r3, #6
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	bf02      	ittt	eq
 8004f6a:	68e5      	ldreq	r5, [r4, #12]
 8004f6c:	6833      	ldreq	r3, [r6, #0]
 8004f6e:	1aed      	subeq	r5, r5, r3
 8004f70:	68a3      	ldr	r3, [r4, #8]
 8004f72:	bf0c      	ite	eq
 8004f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f78:	2500      	movne	r5, #0
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	bfc4      	itt	gt
 8004f7e:	1a9b      	subgt	r3, r3, r2
 8004f80:	18ed      	addgt	r5, r5, r3
 8004f82:	2600      	movs	r6, #0
 8004f84:	341a      	adds	r4, #26
 8004f86:	42b5      	cmp	r5, r6
 8004f88:	d11a      	bne.n	8004fc0 <_printf_common+0xc8>
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	e008      	b.n	8004fa0 <_printf_common+0xa8>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	4652      	mov	r2, sl
 8004f92:	4641      	mov	r1, r8
 8004f94:	4638      	mov	r0, r7
 8004f96:	47c8      	blx	r9
 8004f98:	3001      	adds	r0, #1
 8004f9a:	d103      	bne.n	8004fa4 <_printf_common+0xac>
 8004f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa4:	3501      	adds	r5, #1
 8004fa6:	e7c6      	b.n	8004f36 <_printf_common+0x3e>
 8004fa8:	18e1      	adds	r1, r4, r3
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	2030      	movs	r0, #48	@ 0x30
 8004fae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004fb2:	4422      	add	r2, r4
 8004fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fbc:	3302      	adds	r3, #2
 8004fbe:	e7c7      	b.n	8004f50 <_printf_common+0x58>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	4622      	mov	r2, r4
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	4638      	mov	r0, r7
 8004fc8:	47c8      	blx	r9
 8004fca:	3001      	adds	r0, #1
 8004fcc:	d0e6      	beq.n	8004f9c <_printf_common+0xa4>
 8004fce:	3601      	adds	r6, #1
 8004fd0:	e7d9      	b.n	8004f86 <_printf_common+0x8e>
	...

08004fd4 <_printf_i>:
 8004fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd8:	7e0f      	ldrb	r7, [r1, #24]
 8004fda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004fdc:	2f78      	cmp	r7, #120	@ 0x78
 8004fde:	4691      	mov	r9, r2
 8004fe0:	4680      	mov	r8, r0
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	469a      	mov	sl, r3
 8004fe6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004fea:	d807      	bhi.n	8004ffc <_printf_i+0x28>
 8004fec:	2f62      	cmp	r7, #98	@ 0x62
 8004fee:	d80a      	bhi.n	8005006 <_printf_i+0x32>
 8004ff0:	2f00      	cmp	r7, #0
 8004ff2:	f000 80d1 	beq.w	8005198 <_printf_i+0x1c4>
 8004ff6:	2f58      	cmp	r7, #88	@ 0x58
 8004ff8:	f000 80b8 	beq.w	800516c <_printf_i+0x198>
 8004ffc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005000:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005004:	e03a      	b.n	800507c <_printf_i+0xa8>
 8005006:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800500a:	2b15      	cmp	r3, #21
 800500c:	d8f6      	bhi.n	8004ffc <_printf_i+0x28>
 800500e:	a101      	add	r1, pc, #4	@ (adr r1, 8005014 <_printf_i+0x40>)
 8005010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005014:	0800506d 	.word	0x0800506d
 8005018:	08005081 	.word	0x08005081
 800501c:	08004ffd 	.word	0x08004ffd
 8005020:	08004ffd 	.word	0x08004ffd
 8005024:	08004ffd 	.word	0x08004ffd
 8005028:	08004ffd 	.word	0x08004ffd
 800502c:	08005081 	.word	0x08005081
 8005030:	08004ffd 	.word	0x08004ffd
 8005034:	08004ffd 	.word	0x08004ffd
 8005038:	08004ffd 	.word	0x08004ffd
 800503c:	08004ffd 	.word	0x08004ffd
 8005040:	0800517f 	.word	0x0800517f
 8005044:	080050ab 	.word	0x080050ab
 8005048:	08005139 	.word	0x08005139
 800504c:	08004ffd 	.word	0x08004ffd
 8005050:	08004ffd 	.word	0x08004ffd
 8005054:	080051a1 	.word	0x080051a1
 8005058:	08004ffd 	.word	0x08004ffd
 800505c:	080050ab 	.word	0x080050ab
 8005060:	08004ffd 	.word	0x08004ffd
 8005064:	08004ffd 	.word	0x08004ffd
 8005068:	08005141 	.word	0x08005141
 800506c:	6833      	ldr	r3, [r6, #0]
 800506e:	1d1a      	adds	r2, r3, #4
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6032      	str	r2, [r6, #0]
 8005074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005078:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800507c:	2301      	movs	r3, #1
 800507e:	e09c      	b.n	80051ba <_printf_i+0x1e6>
 8005080:	6833      	ldr	r3, [r6, #0]
 8005082:	6820      	ldr	r0, [r4, #0]
 8005084:	1d19      	adds	r1, r3, #4
 8005086:	6031      	str	r1, [r6, #0]
 8005088:	0606      	lsls	r6, r0, #24
 800508a:	d501      	bpl.n	8005090 <_printf_i+0xbc>
 800508c:	681d      	ldr	r5, [r3, #0]
 800508e:	e003      	b.n	8005098 <_printf_i+0xc4>
 8005090:	0645      	lsls	r5, r0, #25
 8005092:	d5fb      	bpl.n	800508c <_printf_i+0xb8>
 8005094:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005098:	2d00      	cmp	r5, #0
 800509a:	da03      	bge.n	80050a4 <_printf_i+0xd0>
 800509c:	232d      	movs	r3, #45	@ 0x2d
 800509e:	426d      	negs	r5, r5
 80050a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050a4:	4858      	ldr	r0, [pc, #352]	@ (8005208 <_printf_i+0x234>)
 80050a6:	230a      	movs	r3, #10
 80050a8:	e011      	b.n	80050ce <_printf_i+0xfa>
 80050aa:	6821      	ldr	r1, [r4, #0]
 80050ac:	6833      	ldr	r3, [r6, #0]
 80050ae:	0608      	lsls	r0, r1, #24
 80050b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80050b4:	d402      	bmi.n	80050bc <_printf_i+0xe8>
 80050b6:	0649      	lsls	r1, r1, #25
 80050b8:	bf48      	it	mi
 80050ba:	b2ad      	uxthmi	r5, r5
 80050bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80050be:	4852      	ldr	r0, [pc, #328]	@ (8005208 <_printf_i+0x234>)
 80050c0:	6033      	str	r3, [r6, #0]
 80050c2:	bf14      	ite	ne
 80050c4:	230a      	movne	r3, #10
 80050c6:	2308      	moveq	r3, #8
 80050c8:	2100      	movs	r1, #0
 80050ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050ce:	6866      	ldr	r6, [r4, #4]
 80050d0:	60a6      	str	r6, [r4, #8]
 80050d2:	2e00      	cmp	r6, #0
 80050d4:	db05      	blt.n	80050e2 <_printf_i+0x10e>
 80050d6:	6821      	ldr	r1, [r4, #0]
 80050d8:	432e      	orrs	r6, r5
 80050da:	f021 0104 	bic.w	r1, r1, #4
 80050de:	6021      	str	r1, [r4, #0]
 80050e0:	d04b      	beq.n	800517a <_printf_i+0x1a6>
 80050e2:	4616      	mov	r6, r2
 80050e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80050e8:	fb03 5711 	mls	r7, r3, r1, r5
 80050ec:	5dc7      	ldrb	r7, [r0, r7]
 80050ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050f2:	462f      	mov	r7, r5
 80050f4:	42bb      	cmp	r3, r7
 80050f6:	460d      	mov	r5, r1
 80050f8:	d9f4      	bls.n	80050e4 <_printf_i+0x110>
 80050fa:	2b08      	cmp	r3, #8
 80050fc:	d10b      	bne.n	8005116 <_printf_i+0x142>
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	07df      	lsls	r7, r3, #31
 8005102:	d508      	bpl.n	8005116 <_printf_i+0x142>
 8005104:	6923      	ldr	r3, [r4, #16]
 8005106:	6861      	ldr	r1, [r4, #4]
 8005108:	4299      	cmp	r1, r3
 800510a:	bfde      	ittt	le
 800510c:	2330      	movle	r3, #48	@ 0x30
 800510e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005112:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005116:	1b92      	subs	r2, r2, r6
 8005118:	6122      	str	r2, [r4, #16]
 800511a:	f8cd a000 	str.w	sl, [sp]
 800511e:	464b      	mov	r3, r9
 8005120:	aa03      	add	r2, sp, #12
 8005122:	4621      	mov	r1, r4
 8005124:	4640      	mov	r0, r8
 8005126:	f7ff fee7 	bl	8004ef8 <_printf_common>
 800512a:	3001      	adds	r0, #1
 800512c:	d14a      	bne.n	80051c4 <_printf_i+0x1f0>
 800512e:	f04f 30ff 	mov.w	r0, #4294967295
 8005132:	b004      	add	sp, #16
 8005134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	f043 0320 	orr.w	r3, r3, #32
 800513e:	6023      	str	r3, [r4, #0]
 8005140:	4832      	ldr	r0, [pc, #200]	@ (800520c <_printf_i+0x238>)
 8005142:	2778      	movs	r7, #120	@ 0x78
 8005144:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	6831      	ldr	r1, [r6, #0]
 800514c:	061f      	lsls	r7, r3, #24
 800514e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005152:	d402      	bmi.n	800515a <_printf_i+0x186>
 8005154:	065f      	lsls	r7, r3, #25
 8005156:	bf48      	it	mi
 8005158:	b2ad      	uxthmi	r5, r5
 800515a:	6031      	str	r1, [r6, #0]
 800515c:	07d9      	lsls	r1, r3, #31
 800515e:	bf44      	itt	mi
 8005160:	f043 0320 	orrmi.w	r3, r3, #32
 8005164:	6023      	strmi	r3, [r4, #0]
 8005166:	b11d      	cbz	r5, 8005170 <_printf_i+0x19c>
 8005168:	2310      	movs	r3, #16
 800516a:	e7ad      	b.n	80050c8 <_printf_i+0xf4>
 800516c:	4826      	ldr	r0, [pc, #152]	@ (8005208 <_printf_i+0x234>)
 800516e:	e7e9      	b.n	8005144 <_printf_i+0x170>
 8005170:	6823      	ldr	r3, [r4, #0]
 8005172:	f023 0320 	bic.w	r3, r3, #32
 8005176:	6023      	str	r3, [r4, #0]
 8005178:	e7f6      	b.n	8005168 <_printf_i+0x194>
 800517a:	4616      	mov	r6, r2
 800517c:	e7bd      	b.n	80050fa <_printf_i+0x126>
 800517e:	6833      	ldr	r3, [r6, #0]
 8005180:	6825      	ldr	r5, [r4, #0]
 8005182:	6961      	ldr	r1, [r4, #20]
 8005184:	1d18      	adds	r0, r3, #4
 8005186:	6030      	str	r0, [r6, #0]
 8005188:	062e      	lsls	r6, r5, #24
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	d501      	bpl.n	8005192 <_printf_i+0x1be>
 800518e:	6019      	str	r1, [r3, #0]
 8005190:	e002      	b.n	8005198 <_printf_i+0x1c4>
 8005192:	0668      	lsls	r0, r5, #25
 8005194:	d5fb      	bpl.n	800518e <_printf_i+0x1ba>
 8005196:	8019      	strh	r1, [r3, #0]
 8005198:	2300      	movs	r3, #0
 800519a:	6123      	str	r3, [r4, #16]
 800519c:	4616      	mov	r6, r2
 800519e:	e7bc      	b.n	800511a <_printf_i+0x146>
 80051a0:	6833      	ldr	r3, [r6, #0]
 80051a2:	1d1a      	adds	r2, r3, #4
 80051a4:	6032      	str	r2, [r6, #0]
 80051a6:	681e      	ldr	r6, [r3, #0]
 80051a8:	6862      	ldr	r2, [r4, #4]
 80051aa:	2100      	movs	r1, #0
 80051ac:	4630      	mov	r0, r6
 80051ae:	f7ff f817 	bl	80041e0 <memchr>
 80051b2:	b108      	cbz	r0, 80051b8 <_printf_i+0x1e4>
 80051b4:	1b80      	subs	r0, r0, r6
 80051b6:	6060      	str	r0, [r4, #4]
 80051b8:	6863      	ldr	r3, [r4, #4]
 80051ba:	6123      	str	r3, [r4, #16]
 80051bc:	2300      	movs	r3, #0
 80051be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051c2:	e7aa      	b.n	800511a <_printf_i+0x146>
 80051c4:	6923      	ldr	r3, [r4, #16]
 80051c6:	4632      	mov	r2, r6
 80051c8:	4649      	mov	r1, r9
 80051ca:	4640      	mov	r0, r8
 80051cc:	47d0      	blx	sl
 80051ce:	3001      	adds	r0, #1
 80051d0:	d0ad      	beq.n	800512e <_printf_i+0x15a>
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	079b      	lsls	r3, r3, #30
 80051d6:	d413      	bmi.n	8005200 <_printf_i+0x22c>
 80051d8:	68e0      	ldr	r0, [r4, #12]
 80051da:	9b03      	ldr	r3, [sp, #12]
 80051dc:	4298      	cmp	r0, r3
 80051de:	bfb8      	it	lt
 80051e0:	4618      	movlt	r0, r3
 80051e2:	e7a6      	b.n	8005132 <_printf_i+0x15e>
 80051e4:	2301      	movs	r3, #1
 80051e6:	4632      	mov	r2, r6
 80051e8:	4649      	mov	r1, r9
 80051ea:	4640      	mov	r0, r8
 80051ec:	47d0      	blx	sl
 80051ee:	3001      	adds	r0, #1
 80051f0:	d09d      	beq.n	800512e <_printf_i+0x15a>
 80051f2:	3501      	adds	r5, #1
 80051f4:	68e3      	ldr	r3, [r4, #12]
 80051f6:	9903      	ldr	r1, [sp, #12]
 80051f8:	1a5b      	subs	r3, r3, r1
 80051fa:	42ab      	cmp	r3, r5
 80051fc:	dcf2      	bgt.n	80051e4 <_printf_i+0x210>
 80051fe:	e7eb      	b.n	80051d8 <_printf_i+0x204>
 8005200:	2500      	movs	r5, #0
 8005202:	f104 0619 	add.w	r6, r4, #25
 8005206:	e7f5      	b.n	80051f4 <_printf_i+0x220>
 8005208:	08005600 	.word	0x08005600
 800520c:	08005611 	.word	0x08005611

08005210 <__sflush_r>:
 8005210:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005218:	0716      	lsls	r6, r2, #28
 800521a:	4605      	mov	r5, r0
 800521c:	460c      	mov	r4, r1
 800521e:	d454      	bmi.n	80052ca <__sflush_r+0xba>
 8005220:	684b      	ldr	r3, [r1, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	dc02      	bgt.n	800522c <__sflush_r+0x1c>
 8005226:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005228:	2b00      	cmp	r3, #0
 800522a:	dd48      	ble.n	80052be <__sflush_r+0xae>
 800522c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800522e:	2e00      	cmp	r6, #0
 8005230:	d045      	beq.n	80052be <__sflush_r+0xae>
 8005232:	2300      	movs	r3, #0
 8005234:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005238:	682f      	ldr	r7, [r5, #0]
 800523a:	6a21      	ldr	r1, [r4, #32]
 800523c:	602b      	str	r3, [r5, #0]
 800523e:	d030      	beq.n	80052a2 <__sflush_r+0x92>
 8005240:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005242:	89a3      	ldrh	r3, [r4, #12]
 8005244:	0759      	lsls	r1, r3, #29
 8005246:	d505      	bpl.n	8005254 <__sflush_r+0x44>
 8005248:	6863      	ldr	r3, [r4, #4]
 800524a:	1ad2      	subs	r2, r2, r3
 800524c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800524e:	b10b      	cbz	r3, 8005254 <__sflush_r+0x44>
 8005250:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005252:	1ad2      	subs	r2, r2, r3
 8005254:	2300      	movs	r3, #0
 8005256:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005258:	6a21      	ldr	r1, [r4, #32]
 800525a:	4628      	mov	r0, r5
 800525c:	47b0      	blx	r6
 800525e:	1c43      	adds	r3, r0, #1
 8005260:	89a3      	ldrh	r3, [r4, #12]
 8005262:	d106      	bne.n	8005272 <__sflush_r+0x62>
 8005264:	6829      	ldr	r1, [r5, #0]
 8005266:	291d      	cmp	r1, #29
 8005268:	d82b      	bhi.n	80052c2 <__sflush_r+0xb2>
 800526a:	4a2a      	ldr	r2, [pc, #168]	@ (8005314 <__sflush_r+0x104>)
 800526c:	40ca      	lsrs	r2, r1
 800526e:	07d6      	lsls	r6, r2, #31
 8005270:	d527      	bpl.n	80052c2 <__sflush_r+0xb2>
 8005272:	2200      	movs	r2, #0
 8005274:	6062      	str	r2, [r4, #4]
 8005276:	04d9      	lsls	r1, r3, #19
 8005278:	6922      	ldr	r2, [r4, #16]
 800527a:	6022      	str	r2, [r4, #0]
 800527c:	d504      	bpl.n	8005288 <__sflush_r+0x78>
 800527e:	1c42      	adds	r2, r0, #1
 8005280:	d101      	bne.n	8005286 <__sflush_r+0x76>
 8005282:	682b      	ldr	r3, [r5, #0]
 8005284:	b903      	cbnz	r3, 8005288 <__sflush_r+0x78>
 8005286:	6560      	str	r0, [r4, #84]	@ 0x54
 8005288:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800528a:	602f      	str	r7, [r5, #0]
 800528c:	b1b9      	cbz	r1, 80052be <__sflush_r+0xae>
 800528e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005292:	4299      	cmp	r1, r3
 8005294:	d002      	beq.n	800529c <__sflush_r+0x8c>
 8005296:	4628      	mov	r0, r5
 8005298:	f7ff fbf4 	bl	8004a84 <_free_r>
 800529c:	2300      	movs	r3, #0
 800529e:	6363      	str	r3, [r4, #52]	@ 0x34
 80052a0:	e00d      	b.n	80052be <__sflush_r+0xae>
 80052a2:	2301      	movs	r3, #1
 80052a4:	4628      	mov	r0, r5
 80052a6:	47b0      	blx	r6
 80052a8:	4602      	mov	r2, r0
 80052aa:	1c50      	adds	r0, r2, #1
 80052ac:	d1c9      	bne.n	8005242 <__sflush_r+0x32>
 80052ae:	682b      	ldr	r3, [r5, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d0c6      	beq.n	8005242 <__sflush_r+0x32>
 80052b4:	2b1d      	cmp	r3, #29
 80052b6:	d001      	beq.n	80052bc <__sflush_r+0xac>
 80052b8:	2b16      	cmp	r3, #22
 80052ba:	d11e      	bne.n	80052fa <__sflush_r+0xea>
 80052bc:	602f      	str	r7, [r5, #0]
 80052be:	2000      	movs	r0, #0
 80052c0:	e022      	b.n	8005308 <__sflush_r+0xf8>
 80052c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052c6:	b21b      	sxth	r3, r3
 80052c8:	e01b      	b.n	8005302 <__sflush_r+0xf2>
 80052ca:	690f      	ldr	r7, [r1, #16]
 80052cc:	2f00      	cmp	r7, #0
 80052ce:	d0f6      	beq.n	80052be <__sflush_r+0xae>
 80052d0:	0793      	lsls	r3, r2, #30
 80052d2:	680e      	ldr	r6, [r1, #0]
 80052d4:	bf08      	it	eq
 80052d6:	694b      	ldreq	r3, [r1, #20]
 80052d8:	600f      	str	r7, [r1, #0]
 80052da:	bf18      	it	ne
 80052dc:	2300      	movne	r3, #0
 80052de:	eba6 0807 	sub.w	r8, r6, r7
 80052e2:	608b      	str	r3, [r1, #8]
 80052e4:	f1b8 0f00 	cmp.w	r8, #0
 80052e8:	dde9      	ble.n	80052be <__sflush_r+0xae>
 80052ea:	6a21      	ldr	r1, [r4, #32]
 80052ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80052ee:	4643      	mov	r3, r8
 80052f0:	463a      	mov	r2, r7
 80052f2:	4628      	mov	r0, r5
 80052f4:	47b0      	blx	r6
 80052f6:	2800      	cmp	r0, #0
 80052f8:	dc08      	bgt.n	800530c <__sflush_r+0xfc>
 80052fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005302:	81a3      	strh	r3, [r4, #12]
 8005304:	f04f 30ff 	mov.w	r0, #4294967295
 8005308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800530c:	4407      	add	r7, r0
 800530e:	eba8 0800 	sub.w	r8, r8, r0
 8005312:	e7e7      	b.n	80052e4 <__sflush_r+0xd4>
 8005314:	20400001 	.word	0x20400001

08005318 <_fflush_r>:
 8005318:	b538      	push	{r3, r4, r5, lr}
 800531a:	690b      	ldr	r3, [r1, #16]
 800531c:	4605      	mov	r5, r0
 800531e:	460c      	mov	r4, r1
 8005320:	b913      	cbnz	r3, 8005328 <_fflush_r+0x10>
 8005322:	2500      	movs	r5, #0
 8005324:	4628      	mov	r0, r5
 8005326:	bd38      	pop	{r3, r4, r5, pc}
 8005328:	b118      	cbz	r0, 8005332 <_fflush_r+0x1a>
 800532a:	6a03      	ldr	r3, [r0, #32]
 800532c:	b90b      	cbnz	r3, 8005332 <_fflush_r+0x1a>
 800532e:	f7ff faa1 	bl	8004874 <__sinit>
 8005332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0f3      	beq.n	8005322 <_fflush_r+0xa>
 800533a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800533c:	07d0      	lsls	r0, r2, #31
 800533e:	d404      	bmi.n	800534a <_fflush_r+0x32>
 8005340:	0599      	lsls	r1, r3, #22
 8005342:	d402      	bmi.n	800534a <_fflush_r+0x32>
 8005344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005346:	f7ff fb9a 	bl	8004a7e <__retarget_lock_acquire_recursive>
 800534a:	4628      	mov	r0, r5
 800534c:	4621      	mov	r1, r4
 800534e:	f7ff ff5f 	bl	8005210 <__sflush_r>
 8005352:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005354:	07da      	lsls	r2, r3, #31
 8005356:	4605      	mov	r5, r0
 8005358:	d4e4      	bmi.n	8005324 <_fflush_r+0xc>
 800535a:	89a3      	ldrh	r3, [r4, #12]
 800535c:	059b      	lsls	r3, r3, #22
 800535e:	d4e1      	bmi.n	8005324 <_fflush_r+0xc>
 8005360:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005362:	f7ff fb8d 	bl	8004a80 <__retarget_lock_release_recursive>
 8005366:	e7dd      	b.n	8005324 <_fflush_r+0xc>

08005368 <__swbuf_r>:
 8005368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536a:	460e      	mov	r6, r1
 800536c:	4614      	mov	r4, r2
 800536e:	4605      	mov	r5, r0
 8005370:	b118      	cbz	r0, 800537a <__swbuf_r+0x12>
 8005372:	6a03      	ldr	r3, [r0, #32]
 8005374:	b90b      	cbnz	r3, 800537a <__swbuf_r+0x12>
 8005376:	f7ff fa7d 	bl	8004874 <__sinit>
 800537a:	69a3      	ldr	r3, [r4, #24]
 800537c:	60a3      	str	r3, [r4, #8]
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	071a      	lsls	r2, r3, #28
 8005382:	d501      	bpl.n	8005388 <__swbuf_r+0x20>
 8005384:	6923      	ldr	r3, [r4, #16]
 8005386:	b943      	cbnz	r3, 800539a <__swbuf_r+0x32>
 8005388:	4621      	mov	r1, r4
 800538a:	4628      	mov	r0, r5
 800538c:	f000 f82a 	bl	80053e4 <__swsetup_r>
 8005390:	b118      	cbz	r0, 800539a <__swbuf_r+0x32>
 8005392:	f04f 37ff 	mov.w	r7, #4294967295
 8005396:	4638      	mov	r0, r7
 8005398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	6922      	ldr	r2, [r4, #16]
 800539e:	1a98      	subs	r0, r3, r2
 80053a0:	6963      	ldr	r3, [r4, #20]
 80053a2:	b2f6      	uxtb	r6, r6
 80053a4:	4283      	cmp	r3, r0
 80053a6:	4637      	mov	r7, r6
 80053a8:	dc05      	bgt.n	80053b6 <__swbuf_r+0x4e>
 80053aa:	4621      	mov	r1, r4
 80053ac:	4628      	mov	r0, r5
 80053ae:	f7ff ffb3 	bl	8005318 <_fflush_r>
 80053b2:	2800      	cmp	r0, #0
 80053b4:	d1ed      	bne.n	8005392 <__swbuf_r+0x2a>
 80053b6:	68a3      	ldr	r3, [r4, #8]
 80053b8:	3b01      	subs	r3, #1
 80053ba:	60a3      	str	r3, [r4, #8]
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	6022      	str	r2, [r4, #0]
 80053c2:	701e      	strb	r6, [r3, #0]
 80053c4:	6962      	ldr	r2, [r4, #20]
 80053c6:	1c43      	adds	r3, r0, #1
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d004      	beq.n	80053d6 <__swbuf_r+0x6e>
 80053cc:	89a3      	ldrh	r3, [r4, #12]
 80053ce:	07db      	lsls	r3, r3, #31
 80053d0:	d5e1      	bpl.n	8005396 <__swbuf_r+0x2e>
 80053d2:	2e0a      	cmp	r6, #10
 80053d4:	d1df      	bne.n	8005396 <__swbuf_r+0x2e>
 80053d6:	4621      	mov	r1, r4
 80053d8:	4628      	mov	r0, r5
 80053da:	f7ff ff9d 	bl	8005318 <_fflush_r>
 80053de:	2800      	cmp	r0, #0
 80053e0:	d0d9      	beq.n	8005396 <__swbuf_r+0x2e>
 80053e2:	e7d6      	b.n	8005392 <__swbuf_r+0x2a>

080053e4 <__swsetup_r>:
 80053e4:	b538      	push	{r3, r4, r5, lr}
 80053e6:	4b29      	ldr	r3, [pc, #164]	@ (800548c <__swsetup_r+0xa8>)
 80053e8:	4605      	mov	r5, r0
 80053ea:	6818      	ldr	r0, [r3, #0]
 80053ec:	460c      	mov	r4, r1
 80053ee:	b118      	cbz	r0, 80053f8 <__swsetup_r+0x14>
 80053f0:	6a03      	ldr	r3, [r0, #32]
 80053f2:	b90b      	cbnz	r3, 80053f8 <__swsetup_r+0x14>
 80053f4:	f7ff fa3e 	bl	8004874 <__sinit>
 80053f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053fc:	0719      	lsls	r1, r3, #28
 80053fe:	d422      	bmi.n	8005446 <__swsetup_r+0x62>
 8005400:	06da      	lsls	r2, r3, #27
 8005402:	d407      	bmi.n	8005414 <__swsetup_r+0x30>
 8005404:	2209      	movs	r2, #9
 8005406:	602a      	str	r2, [r5, #0]
 8005408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800540c:	81a3      	strh	r3, [r4, #12]
 800540e:	f04f 30ff 	mov.w	r0, #4294967295
 8005412:	e033      	b.n	800547c <__swsetup_r+0x98>
 8005414:	0758      	lsls	r0, r3, #29
 8005416:	d512      	bpl.n	800543e <__swsetup_r+0x5a>
 8005418:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800541a:	b141      	cbz	r1, 800542e <__swsetup_r+0x4a>
 800541c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005420:	4299      	cmp	r1, r3
 8005422:	d002      	beq.n	800542a <__swsetup_r+0x46>
 8005424:	4628      	mov	r0, r5
 8005426:	f7ff fb2d 	bl	8004a84 <_free_r>
 800542a:	2300      	movs	r3, #0
 800542c:	6363      	str	r3, [r4, #52]	@ 0x34
 800542e:	89a3      	ldrh	r3, [r4, #12]
 8005430:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005434:	81a3      	strh	r3, [r4, #12]
 8005436:	2300      	movs	r3, #0
 8005438:	6063      	str	r3, [r4, #4]
 800543a:	6923      	ldr	r3, [r4, #16]
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	89a3      	ldrh	r3, [r4, #12]
 8005440:	f043 0308 	orr.w	r3, r3, #8
 8005444:	81a3      	strh	r3, [r4, #12]
 8005446:	6923      	ldr	r3, [r4, #16]
 8005448:	b94b      	cbnz	r3, 800545e <__swsetup_r+0x7a>
 800544a:	89a3      	ldrh	r3, [r4, #12]
 800544c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005454:	d003      	beq.n	800545e <__swsetup_r+0x7a>
 8005456:	4621      	mov	r1, r4
 8005458:	4628      	mov	r0, r5
 800545a:	f000 f84f 	bl	80054fc <__smakebuf_r>
 800545e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005462:	f013 0201 	ands.w	r2, r3, #1
 8005466:	d00a      	beq.n	800547e <__swsetup_r+0x9a>
 8005468:	2200      	movs	r2, #0
 800546a:	60a2      	str	r2, [r4, #8]
 800546c:	6962      	ldr	r2, [r4, #20]
 800546e:	4252      	negs	r2, r2
 8005470:	61a2      	str	r2, [r4, #24]
 8005472:	6922      	ldr	r2, [r4, #16]
 8005474:	b942      	cbnz	r2, 8005488 <__swsetup_r+0xa4>
 8005476:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800547a:	d1c5      	bne.n	8005408 <__swsetup_r+0x24>
 800547c:	bd38      	pop	{r3, r4, r5, pc}
 800547e:	0799      	lsls	r1, r3, #30
 8005480:	bf58      	it	pl
 8005482:	6962      	ldrpl	r2, [r4, #20]
 8005484:	60a2      	str	r2, [r4, #8]
 8005486:	e7f4      	b.n	8005472 <__swsetup_r+0x8e>
 8005488:	2000      	movs	r0, #0
 800548a:	e7f7      	b.n	800547c <__swsetup_r+0x98>
 800548c:	2000000c 	.word	0x2000000c

08005490 <_sbrk_r>:
 8005490:	b538      	push	{r3, r4, r5, lr}
 8005492:	4d06      	ldr	r5, [pc, #24]	@ (80054ac <_sbrk_r+0x1c>)
 8005494:	2300      	movs	r3, #0
 8005496:	4604      	mov	r4, r0
 8005498:	4608      	mov	r0, r1
 800549a:	602b      	str	r3, [r5, #0]
 800549c:	f7fe ffe4 	bl	8004468 <_sbrk>
 80054a0:	1c43      	adds	r3, r0, #1
 80054a2:	d102      	bne.n	80054aa <_sbrk_r+0x1a>
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	b103      	cbz	r3, 80054aa <_sbrk_r+0x1a>
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	bd38      	pop	{r3, r4, r5, pc}
 80054ac:	200001bc 	.word	0x200001bc

080054b0 <__swhatbuf_r>:
 80054b0:	b570      	push	{r4, r5, r6, lr}
 80054b2:	460c      	mov	r4, r1
 80054b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054b8:	2900      	cmp	r1, #0
 80054ba:	b096      	sub	sp, #88	@ 0x58
 80054bc:	4615      	mov	r5, r2
 80054be:	461e      	mov	r6, r3
 80054c0:	da0d      	bge.n	80054de <__swhatbuf_r+0x2e>
 80054c2:	89a3      	ldrh	r3, [r4, #12]
 80054c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80054c8:	f04f 0100 	mov.w	r1, #0
 80054cc:	bf14      	ite	ne
 80054ce:	2340      	movne	r3, #64	@ 0x40
 80054d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80054d4:	2000      	movs	r0, #0
 80054d6:	6031      	str	r1, [r6, #0]
 80054d8:	602b      	str	r3, [r5, #0]
 80054da:	b016      	add	sp, #88	@ 0x58
 80054dc:	bd70      	pop	{r4, r5, r6, pc}
 80054de:	466a      	mov	r2, sp
 80054e0:	f000 f848 	bl	8005574 <_fstat_r>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	dbec      	blt.n	80054c2 <__swhatbuf_r+0x12>
 80054e8:	9901      	ldr	r1, [sp, #4]
 80054ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80054ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80054f2:	4259      	negs	r1, r3
 80054f4:	4159      	adcs	r1, r3
 80054f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054fa:	e7eb      	b.n	80054d4 <__swhatbuf_r+0x24>

080054fc <__smakebuf_r>:
 80054fc:	898b      	ldrh	r3, [r1, #12]
 80054fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005500:	079d      	lsls	r5, r3, #30
 8005502:	4606      	mov	r6, r0
 8005504:	460c      	mov	r4, r1
 8005506:	d507      	bpl.n	8005518 <__smakebuf_r+0x1c>
 8005508:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800550c:	6023      	str	r3, [r4, #0]
 800550e:	6123      	str	r3, [r4, #16]
 8005510:	2301      	movs	r3, #1
 8005512:	6163      	str	r3, [r4, #20]
 8005514:	b003      	add	sp, #12
 8005516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005518:	ab01      	add	r3, sp, #4
 800551a:	466a      	mov	r2, sp
 800551c:	f7ff ffc8 	bl	80054b0 <__swhatbuf_r>
 8005520:	9f00      	ldr	r7, [sp, #0]
 8005522:	4605      	mov	r5, r0
 8005524:	4639      	mov	r1, r7
 8005526:	4630      	mov	r0, r6
 8005528:	f7ff fb18 	bl	8004b5c <_malloc_r>
 800552c:	b948      	cbnz	r0, 8005542 <__smakebuf_r+0x46>
 800552e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005532:	059a      	lsls	r2, r3, #22
 8005534:	d4ee      	bmi.n	8005514 <__smakebuf_r+0x18>
 8005536:	f023 0303 	bic.w	r3, r3, #3
 800553a:	f043 0302 	orr.w	r3, r3, #2
 800553e:	81a3      	strh	r3, [r4, #12]
 8005540:	e7e2      	b.n	8005508 <__smakebuf_r+0xc>
 8005542:	89a3      	ldrh	r3, [r4, #12]
 8005544:	6020      	str	r0, [r4, #0]
 8005546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800554a:	81a3      	strh	r3, [r4, #12]
 800554c:	9b01      	ldr	r3, [sp, #4]
 800554e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005552:	b15b      	cbz	r3, 800556c <__smakebuf_r+0x70>
 8005554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005558:	4630      	mov	r0, r6
 800555a:	f000 f81d 	bl	8005598 <_isatty_r>
 800555e:	b128      	cbz	r0, 800556c <__smakebuf_r+0x70>
 8005560:	89a3      	ldrh	r3, [r4, #12]
 8005562:	f023 0303 	bic.w	r3, r3, #3
 8005566:	f043 0301 	orr.w	r3, r3, #1
 800556a:	81a3      	strh	r3, [r4, #12]
 800556c:	89a3      	ldrh	r3, [r4, #12]
 800556e:	431d      	orrs	r5, r3
 8005570:	81a5      	strh	r5, [r4, #12]
 8005572:	e7cf      	b.n	8005514 <__smakebuf_r+0x18>

08005574 <_fstat_r>:
 8005574:	b538      	push	{r3, r4, r5, lr}
 8005576:	4d07      	ldr	r5, [pc, #28]	@ (8005594 <_fstat_r+0x20>)
 8005578:	2300      	movs	r3, #0
 800557a:	4604      	mov	r4, r0
 800557c:	4608      	mov	r0, r1
 800557e:	4611      	mov	r1, r2
 8005580:	602b      	str	r3, [r5, #0]
 8005582:	f7fe ff48 	bl	8004416 <_fstat>
 8005586:	1c43      	adds	r3, r0, #1
 8005588:	d102      	bne.n	8005590 <_fstat_r+0x1c>
 800558a:	682b      	ldr	r3, [r5, #0]
 800558c:	b103      	cbz	r3, 8005590 <_fstat_r+0x1c>
 800558e:	6023      	str	r3, [r4, #0]
 8005590:	bd38      	pop	{r3, r4, r5, pc}
 8005592:	bf00      	nop
 8005594:	200001bc 	.word	0x200001bc

08005598 <_isatty_r>:
 8005598:	b538      	push	{r3, r4, r5, lr}
 800559a:	4d06      	ldr	r5, [pc, #24]	@ (80055b4 <_isatty_r+0x1c>)
 800559c:	2300      	movs	r3, #0
 800559e:	4604      	mov	r4, r0
 80055a0:	4608      	mov	r0, r1
 80055a2:	602b      	str	r3, [r5, #0]
 80055a4:	f7fe ff47 	bl	8004436 <_isatty>
 80055a8:	1c43      	adds	r3, r0, #1
 80055aa:	d102      	bne.n	80055b2 <_isatty_r+0x1a>
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	b103      	cbz	r3, 80055b2 <_isatty_r+0x1a>
 80055b0:	6023      	str	r3, [r4, #0]
 80055b2:	bd38      	pop	{r3, r4, r5, pc}
 80055b4:	200001bc 	.word	0x200001bc

080055b8 <_init>:
 80055b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ba:	bf00      	nop
 80055bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055be:	bc08      	pop	{r3}
 80055c0:	469e      	mov	lr, r3
 80055c2:	4770      	bx	lr

080055c4 <_fini>:
 80055c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c6:	bf00      	nop
 80055c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ca:	bc08      	pop	{r3}
 80055cc:	469e      	mov	lr, r3
 80055ce:	4770      	bx	lr
