
final_project_app1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001430  080081a0  080081a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080095d0  080095d0  000025d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800961c  0800961c  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800961c  0800961c  0000261c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009624  08009624  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009624  08009624  00002624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009628  08009628  00002628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800962c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08009688  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08009688  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a01  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008c2  00000000  00000000  00004a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00005350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000159  00000000  00000000  00005550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fcf5  00000000  00000000  000056a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002e78  00000000  00000000  0001539e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055486  00000000  00000000  00018216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006d69c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d80  00000000  00000000  0006d6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0006e460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081a0 <__do_global_dtors_aux>:
 80081a0:	b510      	push	{r4, lr}
 80081a2:	4c05      	ldr	r4, [pc, #20]	@ (80081b8 <__do_global_dtors_aux+0x18>)
 80081a4:	7823      	ldrb	r3, [r4, #0]
 80081a6:	b933      	cbnz	r3, 80081b6 <__do_global_dtors_aux+0x16>
 80081a8:	4b04      	ldr	r3, [pc, #16]	@ (80081bc <__do_global_dtors_aux+0x1c>)
 80081aa:	b113      	cbz	r3, 80081b2 <__do_global_dtors_aux+0x12>
 80081ac:	4804      	ldr	r0, [pc, #16]	@ (80081c0 <__do_global_dtors_aux+0x20>)
 80081ae:	f3af 8000 	nop.w
 80081b2:	2301      	movs	r3, #1
 80081b4:	7023      	strb	r3, [r4, #0]
 80081b6:	bd10      	pop	{r4, pc}
 80081b8:	2000005c 	.word	0x2000005c
 80081bc:	00000000 	.word	0x00000000
 80081c0:	080095b8 	.word	0x080095b8

080081c4 <frame_dummy>:
 80081c4:	b508      	push	{r3, lr}
 80081c6:	4b03      	ldr	r3, [pc, #12]	@ (80081d4 <frame_dummy+0x10>)
 80081c8:	b11b      	cbz	r3, 80081d2 <frame_dummy+0xe>
 80081ca:	4903      	ldr	r1, [pc, #12]	@ (80081d8 <frame_dummy+0x14>)
 80081cc:	4803      	ldr	r0, [pc, #12]	@ (80081dc <frame_dummy+0x18>)
 80081ce:	f3af 8000 	nop.w
 80081d2:	bd08      	pop	{r3, pc}
 80081d4:	00000000 	.word	0x00000000
 80081d8:	20000060 	.word	0x20000060
 80081dc:	080095b8 	.word	0x080095b8

080081e0 <memchr>:
 80081e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80081e4:	2a10      	cmp	r2, #16
 80081e6:	db2b      	blt.n	8008240 <memchr+0x60>
 80081e8:	f010 0f07 	tst.w	r0, #7
 80081ec:	d008      	beq.n	8008200 <memchr+0x20>
 80081ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80081f2:	3a01      	subs	r2, #1
 80081f4:	428b      	cmp	r3, r1
 80081f6:	d02d      	beq.n	8008254 <memchr+0x74>
 80081f8:	f010 0f07 	tst.w	r0, #7
 80081fc:	b342      	cbz	r2, 8008250 <memchr+0x70>
 80081fe:	d1f6      	bne.n	80081ee <memchr+0xe>
 8008200:	b4f0      	push	{r4, r5, r6, r7}
 8008202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800820a:	f022 0407 	bic.w	r4, r2, #7
 800820e:	f07f 0700 	mvns.w	r7, #0
 8008212:	2300      	movs	r3, #0
 8008214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008218:	3c08      	subs	r4, #8
 800821a:	ea85 0501 	eor.w	r5, r5, r1
 800821e:	ea86 0601 	eor.w	r6, r6, r1
 8008222:	fa85 f547 	uadd8	r5, r5, r7
 8008226:	faa3 f587 	sel	r5, r3, r7
 800822a:	fa86 f647 	uadd8	r6, r6, r7
 800822e:	faa5 f687 	sel	r6, r5, r7
 8008232:	b98e      	cbnz	r6, 8008258 <memchr+0x78>
 8008234:	d1ee      	bne.n	8008214 <memchr+0x34>
 8008236:	bcf0      	pop	{r4, r5, r6, r7}
 8008238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800823c:	f002 0207 	and.w	r2, r2, #7
 8008240:	b132      	cbz	r2, 8008250 <memchr+0x70>
 8008242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008246:	3a01      	subs	r2, #1
 8008248:	ea83 0301 	eor.w	r3, r3, r1
 800824c:	b113      	cbz	r3, 8008254 <memchr+0x74>
 800824e:	d1f8      	bne.n	8008242 <memchr+0x62>
 8008250:	2000      	movs	r0, #0
 8008252:	4770      	bx	lr
 8008254:	3801      	subs	r0, #1
 8008256:	4770      	bx	lr
 8008258:	2d00      	cmp	r5, #0
 800825a:	bf06      	itte	eq
 800825c:	4635      	moveq	r5, r6
 800825e:	3803      	subeq	r0, #3
 8008260:	3807      	subne	r0, #7
 8008262:	f015 0f01 	tst.w	r5, #1
 8008266:	d107      	bne.n	8008278 <memchr+0x98>
 8008268:	3001      	adds	r0, #1
 800826a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800826e:	bf02      	ittt	eq
 8008270:	3001      	addeq	r0, #1
 8008272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8008276:	3001      	addeq	r0, #1
 8008278:	bcf0      	pop	{r4, r5, r6, r7}
 800827a:	3801      	subs	r0, #1
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop

08008280 <led_init>:
#define LED_PIN		PIN5
#define PIN13		(1U<<13)
#define BTN_PIN		PIN13

void led_init(void)
{
 8008280:	b480      	push	{r7}
 8008282:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8008284:	4b0b      	ldr	r3, [pc, #44]	@ (80082b4 <led_init+0x34>)
 8008286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008288:	4a0a      	ldr	r2, [pc, #40]	@ (80082b4 <led_init+0x34>)
 800828a:	f043 0301 	orr.w	r3, r3, #1
 800828e:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA5 mode to output mode*/
	GPIOA->MODER |=(1U<<10);
 8008290:	4b09      	ldr	r3, [pc, #36]	@ (80082b8 <led_init+0x38>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a08      	ldr	r2, [pc, #32]	@ (80082b8 <led_init+0x38>)
 8008296:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800829a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 800829c:	4b06      	ldr	r3, [pc, #24]	@ (80082b8 <led_init+0x38>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a05      	ldr	r2, [pc, #20]	@ (80082b8 <led_init+0x38>)
 80082a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80082a6:	6013      	str	r3, [r2, #0]
}
 80082a8:	bf00      	nop
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	40023800 	.word	0x40023800
 80082b8:	40020000 	.word	0x40020000

080082bc <button_init>:
	GPIOA->ODR &=~LED_PIN;

}

void button_init(void)
{
 80082bc:	b480      	push	{r7}
 80082be:	af00      	add	r7, sp, #0
	/*Enable clock access to PORTC*/
	RCC->AHB1ENR |=GPIOCEN;
 80082c0:	4b0b      	ldr	r3, [pc, #44]	@ (80082f0 <button_init+0x34>)
 80082c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082c4:	4a0a      	ldr	r2, [pc, #40]	@ (80082f0 <button_init+0x34>)
 80082c6:	f043 0304 	orr.w	r3, r3, #4
 80082ca:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PC13 as an input pin*/
	GPIOC->MODER &=~(1U<<26);
 80082cc:	4b09      	ldr	r3, [pc, #36]	@ (80082f4 <button_init+0x38>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a08      	ldr	r2, [pc, #32]	@ (80082f4 <button_init+0x38>)
 80082d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80082d6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 80082d8:	4b06      	ldr	r3, [pc, #24]	@ (80082f4 <button_init+0x38>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a05      	ldr	r2, [pc, #20]	@ (80082f4 <button_init+0x38>)
 80082de:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80082e2:	6013      	str	r3, [r2, #0]

}
 80082e4:	bf00      	nop
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	40023800 	.word	0x40023800
 80082f4:	40020800 	.word	0x40020800

080082f8 <enable_fpu>:
#include "stm32f4xx.h"



void enable_fpu(void)
{
 80082f8:	b480      	push	{r7}
 80082fa:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 80082fc:	4b12      	ldr	r3, [pc, #72]	@ (8008348 <enable_fpu+0x50>)
 80082fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008302:	4a11      	ldr	r2, [pc, #68]	@ (8008348 <enable_fpu+0x50>)
 8008304:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008308:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<21);
 800830c:	4b0e      	ldr	r3, [pc, #56]	@ (8008348 <enable_fpu+0x50>)
 800830e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008312:	4a0d      	ldr	r2, [pc, #52]	@ (8008348 <enable_fpu+0x50>)
 8008314:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008318:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<22);
 800831c:	4b0a      	ldr	r3, [pc, #40]	@ (8008348 <enable_fpu+0x50>)
 800831e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008322:	4a09      	ldr	r2, [pc, #36]	@ (8008348 <enable_fpu+0x50>)
 8008324:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008328:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<23);
 800832c:	4b06      	ldr	r3, [pc, #24]	@ (8008348 <enable_fpu+0x50>)
 800832e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008332:	4a05      	ldr	r2, [pc, #20]	@ (8008348 <enable_fpu+0x50>)
 8008334:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008338:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

}
 800833c:	bf00      	nop
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	e000ed00 	.word	0xe000ed00

0800834c <main>:
#define  PIN5			(1U<<5)
#define  LED_PIN		PIN5

bool btn_state;
int main()
{
 800834c:	b580      	push	{r7, lr}
 800834e:	af00      	add	r7, sp, #0
	/*Enable FPU*/
	enable_fpu();
 8008350:	f7ff ffd2 	bl	80082f8 <enable_fpu>

	/*Initialize debug UART*/
	sys_uart_init();
 8008354:	f000 f920 	bl	8008598 <sys_uart_init>

	/*Initialize timebase*/
	timebase_init();
 8008358:	f000 f8ca 	bl	80084f0 <timebase_init>

	/*Initialize LED*/
	led_init();
 800835c:	f7ff ff90 	bl	8008280 <led_init>

	/*Initialize Push button*/

	button_init();
 8008360:	f7ff ffac 	bl	80082bc <button_init>
	while(1)
	{
		printf("APP1 is running......\n\r");
 8008364:	4801      	ldr	r0, [pc, #4]	@ (800836c <main+0x20>)
 8008366:	f000 fabb 	bl	80088e0 <iprintf>
 800836a:	e7fb      	b.n	8008364 <main+0x18>
 800836c:	080095d0 	.word	0x080095d0

08008370 <SystemInit>:
	}
}


void SystemInit(void)
{
 8008370:	b480      	push	{r7}
 8008372:	af00      	add	r7, sp, #0
	SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8008374:	4b03      	ldr	r3, [pc, #12]	@ (8008384 <SystemInit+0x14>)
 8008376:	4a04      	ldr	r2, [pc, #16]	@ (8008388 <SystemInit+0x18>)
 8008378:	609a      	str	r2, [r3, #8]
}
 800837a:	bf00      	nop
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	e000ed00 	.word	0xe000ed00
 8008388:	08008000 	.word	0x08008000

0800838c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008398:	2300      	movs	r3, #0
 800839a:	617b      	str	r3, [r7, #20]
 800839c:	e00a      	b.n	80083b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800839e:	f3af 8000 	nop.w
 80083a2:	4601      	mov	r1, r0
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	60ba      	str	r2, [r7, #8]
 80083aa:	b2ca      	uxtb	r2, r1
 80083ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	3301      	adds	r3, #1
 80083b2:	617b      	str	r3, [r7, #20]
 80083b4:	697a      	ldr	r2, [r7, #20]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	dbf0      	blt.n	800839e <_read+0x12>
  }

  return len;
 80083bc:	687b      	ldr	r3, [r7, #4]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3718      	adds	r7, #24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b086      	sub	sp, #24
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	60f8      	str	r0, [r7, #12]
 80083ce:	60b9      	str	r1, [r7, #8]
 80083d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80083d2:	2300      	movs	r3, #0
 80083d4:	617b      	str	r3, [r7, #20]
 80083d6:	e009      	b.n	80083ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	1c5a      	adds	r2, r3, #1
 80083dc:	60ba      	str	r2, [r7, #8]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f000 f8cd 	bl	8008580 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	3301      	adds	r3, #1
 80083ea:	617b      	str	r3, [r7, #20]
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	dbf1      	blt.n	80083d8 <_write+0x12>
  }
  return len;
 80083f4:	687b      	ldr	r3, [r7, #4]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3718      	adds	r7, #24
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <_close>:

int _close(int file)
{
 80083fe:	b480      	push	{r7}
 8008400:	b083      	sub	sp, #12
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008406:	f04f 33ff 	mov.w	r3, #4294967295
}
 800840a:	4618      	mov	r0, r3
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008416:	b480      	push	{r7}
 8008418:	b083      	sub	sp, #12
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008426:	605a      	str	r2, [r3, #4]
  return 0;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	370c      	adds	r7, #12
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr

08008436 <_isatty>:

int _isatty(int file)
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800843e:	2301      	movs	r3, #1
}
 8008440:	4618      	mov	r0, r3
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3714      	adds	r7, #20
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
	...

08008468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008470:	4a14      	ldr	r2, [pc, #80]	@ (80084c4 <_sbrk+0x5c>)
 8008472:	4b15      	ldr	r3, [pc, #84]	@ (80084c8 <_sbrk+0x60>)
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800847c:	4b13      	ldr	r3, [pc, #76]	@ (80084cc <_sbrk+0x64>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d102      	bne.n	800848a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008484:	4b11      	ldr	r3, [pc, #68]	@ (80084cc <_sbrk+0x64>)
 8008486:	4a12      	ldr	r2, [pc, #72]	@ (80084d0 <_sbrk+0x68>)
 8008488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800848a:	4b10      	ldr	r3, [pc, #64]	@ (80084cc <_sbrk+0x64>)
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4413      	add	r3, r2
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	429a      	cmp	r2, r3
 8008496:	d207      	bcs.n	80084a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008498:	f000 fac6 	bl	8008a28 <__errno>
 800849c:	4603      	mov	r3, r0
 800849e:	220c      	movs	r2, #12
 80084a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80084a2:	f04f 33ff 	mov.w	r3, #4294967295
 80084a6:	e009      	b.n	80084bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80084a8:	4b08      	ldr	r3, [pc, #32]	@ (80084cc <_sbrk+0x64>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80084ae:	4b07      	ldr	r3, [pc, #28]	@ (80084cc <_sbrk+0x64>)
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4413      	add	r3, r2
 80084b6:	4a05      	ldr	r2, [pc, #20]	@ (80084cc <_sbrk+0x64>)
 80084b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80084ba:	68fb      	ldr	r3, [r7, #12]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	20018000 	.word	0x20018000
 80084c8:	00000400 	.word	0x00000400
 80084cc:	20000078 	.word	0x20000078
 80084d0:	200001d0 	.word	0x200001d0

080084d4 <tick_increment>:

	return g_curr_tick_p;

}
static void tick_increment(void)
{
 80084d4:	b480      	push	{r7}
 80084d6:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 80084d8:	4b04      	ldr	r3, [pc, #16]	@ (80084ec <tick_increment+0x18>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3301      	adds	r3, #1
 80084de:	4a03      	ldr	r2, [pc, #12]	@ (80084ec <tick_increment+0x18>)
 80084e0:	6013      	str	r3, [r2, #0]
}
 80084e2:	bf00      	nop
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr
 80084ec:	2000007c 	.word	0x2000007c

080084f0 <timebase_init>:
void timebase_init(void)
{
 80084f0:	b480      	push	{r7}
 80084f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80084f4:	b672      	cpsid	i
}
 80084f6:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per second*/
	SysTick->LOAD =  ONE_MSEC_LOAD - 1;
 80084f8:	4b0e      	ldr	r3, [pc, #56]	@ (8008534 <timebase_init+0x44>)
 80084fa:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80084fe:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 8008500:	4b0c      	ldr	r3, [pc, #48]	@ (8008534 <timebase_init+0x44>)
 8008502:	2200      	movs	r2, #0
 8008504:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 8008506:	4b0b      	ldr	r3, [pc, #44]	@ (8008534 <timebase_init+0x44>)
 8008508:	2204      	movs	r2, #4
 800850a:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 800850c:	4b09      	ldr	r3, [pc, #36]	@ (8008534 <timebase_init+0x44>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a08      	ldr	r2, [pc, #32]	@ (8008534 <timebase_init+0x44>)
 8008512:	f043 0302 	orr.w	r3, r3, #2
 8008516:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 8008518:	4b06      	ldr	r3, [pc, #24]	@ (8008534 <timebase_init+0x44>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a05      	ldr	r2, [pc, #20]	@ (8008534 <timebase_init+0x44>)
 800851e:	f043 0301 	orr.w	r3, r3, #1
 8008522:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008524:	b662      	cpsie	i
}
 8008526:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 8008528:	bf00      	nop
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	e000e010 	.word	0xe000e010

08008538 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	af00      	add	r7, sp, #0
	tick_increment();
 800853c:	f7ff ffca 	bl	80084d4 <tick_increment>
}
 8008540:	bf00      	nop
 8008542:	bd80      	pop	{r7, pc}

08008544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	4603      	mov	r3, r0
 800854c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800854e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008552:	2b00      	cmp	r3, #0
 8008554:	db0b      	blt.n	800856e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008556:	79fb      	ldrb	r3, [r7, #7]
 8008558:	f003 021f 	and.w	r2, r3, #31
 800855c:	4907      	ldr	r1, [pc, #28]	@ (800857c <__NVIC_EnableIRQ+0x38>)
 800855e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008562:	095b      	lsrs	r3, r3, #5
 8008564:	2001      	movs	r0, #1
 8008566:	fa00 f202 	lsl.w	r2, r0, r2
 800856a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800856e:	bf00      	nop
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	e000e100 	.word	0xe000e100

08008580 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 f87d 	bl	8008688 <uart_write>
	return ch;
 800858e:	687b      	ldr	r3, [r7, #4]
}
 8008590:	4618      	mov	r0, r3
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <sys_uart_init>:

void sys_uart_init(void)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 800859c:	4b36      	ldr	r3, [pc, #216]	@ (8008678 <sys_uart_init+0xe0>)
 800859e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085a0:	4a35      	ldr	r2, [pc, #212]	@ (8008678 <sys_uart_init+0xe0>)
 80085a2:	f043 0301 	orr.w	r3, r3, #1
 80085a6:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 80085a8:	4b34      	ldr	r3, [pc, #208]	@ (800867c <sys_uart_init+0xe4>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a33      	ldr	r2, [pc, #204]	@ (800867c <sys_uart_init+0xe4>)
 80085ae:	f023 0310 	bic.w	r3, r3, #16
 80085b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 80085b4:	4b31      	ldr	r3, [pc, #196]	@ (800867c <sys_uart_init+0xe4>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a30      	ldr	r2, [pc, #192]	@ (800867c <sys_uart_init+0xe4>)
 80085ba:	f043 0320 	orr.w	r3, r3, #32
 80085be:	6013      	str	r3, [r2, #0]

	/*Set the mode of PA3 to alternate function mode*/
		GPIOA->MODER &=~(1U<<6);//
 80085c0:	4b2e      	ldr	r3, [pc, #184]	@ (800867c <sys_uart_init+0xe4>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a2d      	ldr	r2, [pc, #180]	@ (800867c <sys_uart_init+0xe4>)
 80085c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085ca:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |=(1U<<7);//
 80085cc:	4b2b      	ldr	r3, [pc, #172]	@ (800867c <sys_uart_init+0xe4>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a2a      	ldr	r2, [pc, #168]	@ (800867c <sys_uart_init+0xe4>)
 80085d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085d6:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_RX)*/
		GPIOA->AFR[0] |=(1U<<12);//
 80085d8:	4b28      	ldr	r3, [pc, #160]	@ (800867c <sys_uart_init+0xe4>)
 80085da:	6a1b      	ldr	r3, [r3, #32]
 80085dc:	4a27      	ldr	r2, [pc, #156]	@ (800867c <sys_uart_init+0xe4>)
 80085de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80085e2:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |=(1U<<13);//
 80085e4:	4b25      	ldr	r3, [pc, #148]	@ (800867c <sys_uart_init+0xe4>)
 80085e6:	6a1b      	ldr	r3, [r3, #32]
 80085e8:	4a24      	ldr	r2, [pc, #144]	@ (800867c <sys_uart_init+0xe4>)
 80085ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80085ee:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |=(1U<<14);//
 80085f0:	4b22      	ldr	r3, [pc, #136]	@ (800867c <sys_uart_init+0xe4>)
 80085f2:	6a1b      	ldr	r3, [r3, #32]
 80085f4:	4a21      	ldr	r2, [pc, #132]	@ (800867c <sys_uart_init+0xe4>)
 80085f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80085fa:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &=~(1U<<15);	//
 80085fc:	4b1f      	ldr	r3, [pc, #124]	@ (800867c <sys_uart_init+0xe4>)
 80085fe:	6a1b      	ldr	r3, [r3, #32]
 8008600:	4a1e      	ldr	r2, [pc, #120]	@ (800867c <sys_uart_init+0xe4>)
 8008602:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008606:	6213      	str	r3, [r2, #32]


	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 8008608:	4b1c      	ldr	r3, [pc, #112]	@ (800867c <sys_uart_init+0xe4>)
 800860a:	6a1b      	ldr	r3, [r3, #32]
 800860c:	4a1b      	ldr	r2, [pc, #108]	@ (800867c <sys_uart_init+0xe4>)
 800860e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008612:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8008614:	4b19      	ldr	r3, [pc, #100]	@ (800867c <sys_uart_init+0xe4>)
 8008616:	6a1b      	ldr	r3, [r3, #32]
 8008618:	4a18      	ldr	r2, [pc, #96]	@ (800867c <sys_uart_init+0xe4>)
 800861a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800861e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8008620:	4b16      	ldr	r3, [pc, #88]	@ (800867c <sys_uart_init+0xe4>)
 8008622:	6a1b      	ldr	r3, [r3, #32]
 8008624:	4a15      	ldr	r2, [pc, #84]	@ (800867c <sys_uart_init+0xe4>)
 8008626:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800862a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 800862c:	4b13      	ldr	r3, [pc, #76]	@ (800867c <sys_uart_init+0xe4>)
 800862e:	6a1b      	ldr	r3, [r3, #32]
 8008630:	4a12      	ldr	r2, [pc, #72]	@ (800867c <sys_uart_init+0xe4>)
 8008632:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008636:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 8008638:	4b0f      	ldr	r3, [pc, #60]	@ (8008678 <sys_uart_init+0xe0>)
 800863a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800863c:	4a0e      	ldr	r2, [pc, #56]	@ (8008678 <sys_uart_init+0xe0>)
 800863e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008642:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 8008644:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8008648:	480d      	ldr	r0, [pc, #52]	@ (8008680 <sys_uart_init+0xe8>)
 800864a:	f000 f849 	bl	80086e0 <uart_set_baudrate>

	/*Configure transfer direction (tx and rx)*/
     USART2->CR1 = CR1_TE|CR1_RE;
 800864e:	4b0d      	ldr	r3, [pc, #52]	@ (8008684 <sys_uart_init+0xec>)
 8008650:	220c      	movs	r2, #12
 8008652:	60da      	str	r2, [r3, #12]

     //enable uart RX interrupt
     USART2->CR1 |= CR1_RXNEIE;
 8008654:	4b0b      	ldr	r3, [pc, #44]	@ (8008684 <sys_uart_init+0xec>)
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	4a0a      	ldr	r2, [pc, #40]	@ (8008684 <sys_uart_init+0xec>)
 800865a:	f043 0320 	orr.w	r3, r3, #32
 800865e:	60d3      	str	r3, [r2, #12]

     //enable uart interrupt in nvic
     NVIC_EnableIRQ(USART2_IRQn);
 8008660:	2026      	movs	r0, #38	@ 0x26
 8008662:	f7ff ff6f 	bl	8008544 <__NVIC_EnableIRQ>

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 8008666:	4b07      	ldr	r3, [pc, #28]	@ (8008684 <sys_uart_init+0xec>)
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	4a06      	ldr	r2, [pc, #24]	@ (8008684 <sys_uart_init+0xec>)
 800866c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008670:	60d3      	str	r3, [r2, #12]
}
 8008672:	bf00      	nop
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	40023800 	.word	0x40023800
 800867c:	40020000 	.word	0x40020000
 8008680:	00f42400 	.word	0x00f42400
 8008684:	40004400 	.word	0x40004400

08008688 <uart_write>:



static void uart_write(int ch)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8008690:	bf00      	nop
 8008692:	4b08      	ldr	r3, [pc, #32]	@ (80086b4 <uart_write+0x2c>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800869a:	2b00      	cmp	r3, #0
 800869c:	d0f9      	beq.n	8008692 <uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a04      	ldr	r2, [pc, #16]	@ (80086b4 <uart_write+0x2c>)
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	6053      	str	r3, [r2, #4]
}
 80086a6:	bf00      	nop
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	40004400 	.word	0x40004400

080086b8 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	085a      	lsrs	r2, r3, #1
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	441a      	add	r2, r3
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d0:	b29b      	uxth	r3, r3
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	370c      	adds	r7, #12
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
	...

080086e0 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f7ff ffe3 	bl	80086b8 <compute_uart_bd>
 80086f2:	4603      	mov	r3, r0
 80086f4:	461a      	mov	r2, r3
 80086f6:	4b03      	ldr	r3, [pc, #12]	@ (8008704 <uart_set_baudrate+0x24>)
 80086f8:	609a      	str	r2, [r3, #8]
}
 80086fa:	bf00      	nop
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	40004400 	.word	0x40004400

08008708 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008708:	480d      	ldr	r0, [pc, #52]	@ (8008740 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800870a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800870c:	f7ff fe30 	bl	8008370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008710:	480c      	ldr	r0, [pc, #48]	@ (8008744 <LoopForever+0x6>)
  ldr r1, =_edata
 8008712:	490d      	ldr	r1, [pc, #52]	@ (8008748 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008714:	4a0d      	ldr	r2, [pc, #52]	@ (800874c <LoopForever+0xe>)
  movs r3, #0
 8008716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008718:	e002      	b.n	8008720 <LoopCopyDataInit>

0800871a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800871a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800871c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800871e:	3304      	adds	r3, #4

08008720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008724:	d3f9      	bcc.n	800871a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008726:	4a0a      	ldr	r2, [pc, #40]	@ (8008750 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008728:	4c0a      	ldr	r4, [pc, #40]	@ (8008754 <LoopForever+0x16>)
  movs r3, #0
 800872a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800872c:	e001      	b.n	8008732 <LoopFillZerobss>

0800872e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800872e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008730:	3204      	adds	r2, #4

08008732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008734:	d3fb      	bcc.n	800872e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8008736:	f000 f97d 	bl	8008a34 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800873a:	f7ff fe07 	bl	800834c <main>

0800873e <LoopForever>:

LoopForever:
  b LoopForever
 800873e:	e7fe      	b.n	800873e <LoopForever>
  ldr   r0, =_estack
 8008740:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8008744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008748:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800874c:	0800962c 	.word	0x0800962c
  ldr r2, =_sbss
 8008750:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8008754:	200001cc 	.word	0x200001cc

08008758 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008758:	e7fe      	b.n	8008758 <ADC_IRQHandler>
	...

0800875c <std>:
 800875c:	2300      	movs	r3, #0
 800875e:	b510      	push	{r4, lr}
 8008760:	4604      	mov	r4, r0
 8008762:	e9c0 3300 	strd	r3, r3, [r0]
 8008766:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800876a:	6083      	str	r3, [r0, #8]
 800876c:	8181      	strh	r1, [r0, #12]
 800876e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008770:	81c2      	strh	r2, [r0, #14]
 8008772:	6183      	str	r3, [r0, #24]
 8008774:	4619      	mov	r1, r3
 8008776:	2208      	movs	r2, #8
 8008778:	305c      	adds	r0, #92	@ 0x5c
 800877a:	f000 f906 	bl	800898a <memset>
 800877e:	4b0d      	ldr	r3, [pc, #52]	@ (80087b4 <std+0x58>)
 8008780:	6263      	str	r3, [r4, #36]	@ 0x24
 8008782:	4b0d      	ldr	r3, [pc, #52]	@ (80087b8 <std+0x5c>)
 8008784:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008786:	4b0d      	ldr	r3, [pc, #52]	@ (80087bc <std+0x60>)
 8008788:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800878a:	4b0d      	ldr	r3, [pc, #52]	@ (80087c0 <std+0x64>)
 800878c:	6323      	str	r3, [r4, #48]	@ 0x30
 800878e:	4b0d      	ldr	r3, [pc, #52]	@ (80087c4 <std+0x68>)
 8008790:	6224      	str	r4, [r4, #32]
 8008792:	429c      	cmp	r4, r3
 8008794:	d006      	beq.n	80087a4 <std+0x48>
 8008796:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800879a:	4294      	cmp	r4, r2
 800879c:	d002      	beq.n	80087a4 <std+0x48>
 800879e:	33d0      	adds	r3, #208	@ 0xd0
 80087a0:	429c      	cmp	r4, r3
 80087a2:	d105      	bne.n	80087b0 <std+0x54>
 80087a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80087a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087ac:	f000 b966 	b.w	8008a7c <__retarget_lock_init_recursive>
 80087b0:	bd10      	pop	{r4, pc}
 80087b2:	bf00      	nop
 80087b4:	08008905 	.word	0x08008905
 80087b8:	08008927 	.word	0x08008927
 80087bc:	0800895f 	.word	0x0800895f
 80087c0:	08008983 	.word	0x08008983
 80087c4:	20000080 	.word	0x20000080

080087c8 <stdio_exit_handler>:
 80087c8:	4a02      	ldr	r2, [pc, #8]	@ (80087d4 <stdio_exit_handler+0xc>)
 80087ca:	4903      	ldr	r1, [pc, #12]	@ (80087d8 <stdio_exit_handler+0x10>)
 80087cc:	4803      	ldr	r0, [pc, #12]	@ (80087dc <stdio_exit_handler+0x14>)
 80087ce:	f000 b869 	b.w	80088a4 <_fwalk_sglue>
 80087d2:	bf00      	nop
 80087d4:	20000000 	.word	0x20000000
 80087d8:	08009319 	.word	0x08009319
 80087dc:	20000010 	.word	0x20000010

080087e0 <cleanup_stdio>:
 80087e0:	6841      	ldr	r1, [r0, #4]
 80087e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008814 <cleanup_stdio+0x34>)
 80087e4:	4299      	cmp	r1, r3
 80087e6:	b510      	push	{r4, lr}
 80087e8:	4604      	mov	r4, r0
 80087ea:	d001      	beq.n	80087f0 <cleanup_stdio+0x10>
 80087ec:	f000 fd94 	bl	8009318 <_fflush_r>
 80087f0:	68a1      	ldr	r1, [r4, #8]
 80087f2:	4b09      	ldr	r3, [pc, #36]	@ (8008818 <cleanup_stdio+0x38>)
 80087f4:	4299      	cmp	r1, r3
 80087f6:	d002      	beq.n	80087fe <cleanup_stdio+0x1e>
 80087f8:	4620      	mov	r0, r4
 80087fa:	f000 fd8d 	bl	8009318 <_fflush_r>
 80087fe:	68e1      	ldr	r1, [r4, #12]
 8008800:	4b06      	ldr	r3, [pc, #24]	@ (800881c <cleanup_stdio+0x3c>)
 8008802:	4299      	cmp	r1, r3
 8008804:	d004      	beq.n	8008810 <cleanup_stdio+0x30>
 8008806:	4620      	mov	r0, r4
 8008808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800880c:	f000 bd84 	b.w	8009318 <_fflush_r>
 8008810:	bd10      	pop	{r4, pc}
 8008812:	bf00      	nop
 8008814:	20000080 	.word	0x20000080
 8008818:	200000e8 	.word	0x200000e8
 800881c:	20000150 	.word	0x20000150

08008820 <global_stdio_init.part.0>:
 8008820:	b510      	push	{r4, lr}
 8008822:	4b0b      	ldr	r3, [pc, #44]	@ (8008850 <global_stdio_init.part.0+0x30>)
 8008824:	4c0b      	ldr	r4, [pc, #44]	@ (8008854 <global_stdio_init.part.0+0x34>)
 8008826:	4a0c      	ldr	r2, [pc, #48]	@ (8008858 <global_stdio_init.part.0+0x38>)
 8008828:	601a      	str	r2, [r3, #0]
 800882a:	4620      	mov	r0, r4
 800882c:	2200      	movs	r2, #0
 800882e:	2104      	movs	r1, #4
 8008830:	f7ff ff94 	bl	800875c <std>
 8008834:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008838:	2201      	movs	r2, #1
 800883a:	2109      	movs	r1, #9
 800883c:	f7ff ff8e 	bl	800875c <std>
 8008840:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008844:	2202      	movs	r2, #2
 8008846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800884a:	2112      	movs	r1, #18
 800884c:	f7ff bf86 	b.w	800875c <std>
 8008850:	200001b8 	.word	0x200001b8
 8008854:	20000080 	.word	0x20000080
 8008858:	080087c9 	.word	0x080087c9

0800885c <__sfp_lock_acquire>:
 800885c:	4801      	ldr	r0, [pc, #4]	@ (8008864 <__sfp_lock_acquire+0x8>)
 800885e:	f000 b90e 	b.w	8008a7e <__retarget_lock_acquire_recursive>
 8008862:	bf00      	nop
 8008864:	200001c1 	.word	0x200001c1

08008868 <__sfp_lock_release>:
 8008868:	4801      	ldr	r0, [pc, #4]	@ (8008870 <__sfp_lock_release+0x8>)
 800886a:	f000 b909 	b.w	8008a80 <__retarget_lock_release_recursive>
 800886e:	bf00      	nop
 8008870:	200001c1 	.word	0x200001c1

08008874 <__sinit>:
 8008874:	b510      	push	{r4, lr}
 8008876:	4604      	mov	r4, r0
 8008878:	f7ff fff0 	bl	800885c <__sfp_lock_acquire>
 800887c:	6a23      	ldr	r3, [r4, #32]
 800887e:	b11b      	cbz	r3, 8008888 <__sinit+0x14>
 8008880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008884:	f7ff bff0 	b.w	8008868 <__sfp_lock_release>
 8008888:	4b04      	ldr	r3, [pc, #16]	@ (800889c <__sinit+0x28>)
 800888a:	6223      	str	r3, [r4, #32]
 800888c:	4b04      	ldr	r3, [pc, #16]	@ (80088a0 <__sinit+0x2c>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1f5      	bne.n	8008880 <__sinit+0xc>
 8008894:	f7ff ffc4 	bl	8008820 <global_stdio_init.part.0>
 8008898:	e7f2      	b.n	8008880 <__sinit+0xc>
 800889a:	bf00      	nop
 800889c:	080087e1 	.word	0x080087e1
 80088a0:	200001b8 	.word	0x200001b8

080088a4 <_fwalk_sglue>:
 80088a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088a8:	4607      	mov	r7, r0
 80088aa:	4688      	mov	r8, r1
 80088ac:	4614      	mov	r4, r2
 80088ae:	2600      	movs	r6, #0
 80088b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088b4:	f1b9 0901 	subs.w	r9, r9, #1
 80088b8:	d505      	bpl.n	80088c6 <_fwalk_sglue+0x22>
 80088ba:	6824      	ldr	r4, [r4, #0]
 80088bc:	2c00      	cmp	r4, #0
 80088be:	d1f7      	bne.n	80088b0 <_fwalk_sglue+0xc>
 80088c0:	4630      	mov	r0, r6
 80088c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088c6:	89ab      	ldrh	r3, [r5, #12]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d907      	bls.n	80088dc <_fwalk_sglue+0x38>
 80088cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088d0:	3301      	adds	r3, #1
 80088d2:	d003      	beq.n	80088dc <_fwalk_sglue+0x38>
 80088d4:	4629      	mov	r1, r5
 80088d6:	4638      	mov	r0, r7
 80088d8:	47c0      	blx	r8
 80088da:	4306      	orrs	r6, r0
 80088dc:	3568      	adds	r5, #104	@ 0x68
 80088de:	e7e9      	b.n	80088b4 <_fwalk_sglue+0x10>

080088e0 <iprintf>:
 80088e0:	b40f      	push	{r0, r1, r2, r3}
 80088e2:	b507      	push	{r0, r1, r2, lr}
 80088e4:	4906      	ldr	r1, [pc, #24]	@ (8008900 <iprintf+0x20>)
 80088e6:	ab04      	add	r3, sp, #16
 80088e8:	6808      	ldr	r0, [r1, #0]
 80088ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ee:	6881      	ldr	r1, [r0, #8]
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	f000 f9e9 	bl	8008cc8 <_vfiprintf_r>
 80088f6:	b003      	add	sp, #12
 80088f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80088fc:	b004      	add	sp, #16
 80088fe:	4770      	bx	lr
 8008900:	2000000c 	.word	0x2000000c

08008904 <__sread>:
 8008904:	b510      	push	{r4, lr}
 8008906:	460c      	mov	r4, r1
 8008908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800890c:	f000 f868 	bl	80089e0 <_read_r>
 8008910:	2800      	cmp	r0, #0
 8008912:	bfab      	itete	ge
 8008914:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008916:	89a3      	ldrhlt	r3, [r4, #12]
 8008918:	181b      	addge	r3, r3, r0
 800891a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800891e:	bfac      	ite	ge
 8008920:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008922:	81a3      	strhlt	r3, [r4, #12]
 8008924:	bd10      	pop	{r4, pc}

08008926 <__swrite>:
 8008926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800892a:	461f      	mov	r7, r3
 800892c:	898b      	ldrh	r3, [r1, #12]
 800892e:	05db      	lsls	r3, r3, #23
 8008930:	4605      	mov	r5, r0
 8008932:	460c      	mov	r4, r1
 8008934:	4616      	mov	r6, r2
 8008936:	d505      	bpl.n	8008944 <__swrite+0x1e>
 8008938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800893c:	2302      	movs	r3, #2
 800893e:	2200      	movs	r2, #0
 8008940:	f000 f83c 	bl	80089bc <_lseek_r>
 8008944:	89a3      	ldrh	r3, [r4, #12]
 8008946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800894a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800894e:	81a3      	strh	r3, [r4, #12]
 8008950:	4632      	mov	r2, r6
 8008952:	463b      	mov	r3, r7
 8008954:	4628      	mov	r0, r5
 8008956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800895a:	f000 b853 	b.w	8008a04 <_write_r>

0800895e <__sseek>:
 800895e:	b510      	push	{r4, lr}
 8008960:	460c      	mov	r4, r1
 8008962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008966:	f000 f829 	bl	80089bc <_lseek_r>
 800896a:	1c43      	adds	r3, r0, #1
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	bf15      	itete	ne
 8008970:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008972:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008976:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800897a:	81a3      	strheq	r3, [r4, #12]
 800897c:	bf18      	it	ne
 800897e:	81a3      	strhne	r3, [r4, #12]
 8008980:	bd10      	pop	{r4, pc}

08008982 <__sclose>:
 8008982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008986:	f000 b809 	b.w	800899c <_close_r>

0800898a <memset>:
 800898a:	4402      	add	r2, r0
 800898c:	4603      	mov	r3, r0
 800898e:	4293      	cmp	r3, r2
 8008990:	d100      	bne.n	8008994 <memset+0xa>
 8008992:	4770      	bx	lr
 8008994:	f803 1b01 	strb.w	r1, [r3], #1
 8008998:	e7f9      	b.n	800898e <memset+0x4>
	...

0800899c <_close_r>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	4d06      	ldr	r5, [pc, #24]	@ (80089b8 <_close_r+0x1c>)
 80089a0:	2300      	movs	r3, #0
 80089a2:	4604      	mov	r4, r0
 80089a4:	4608      	mov	r0, r1
 80089a6:	602b      	str	r3, [r5, #0]
 80089a8:	f7ff fd29 	bl	80083fe <_close>
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	d102      	bne.n	80089b6 <_close_r+0x1a>
 80089b0:	682b      	ldr	r3, [r5, #0]
 80089b2:	b103      	cbz	r3, 80089b6 <_close_r+0x1a>
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	bd38      	pop	{r3, r4, r5, pc}
 80089b8:	200001bc 	.word	0x200001bc

080089bc <_lseek_r>:
 80089bc:	b538      	push	{r3, r4, r5, lr}
 80089be:	4d07      	ldr	r5, [pc, #28]	@ (80089dc <_lseek_r+0x20>)
 80089c0:	4604      	mov	r4, r0
 80089c2:	4608      	mov	r0, r1
 80089c4:	4611      	mov	r1, r2
 80089c6:	2200      	movs	r2, #0
 80089c8:	602a      	str	r2, [r5, #0]
 80089ca:	461a      	mov	r2, r3
 80089cc:	f7ff fd3e 	bl	800844c <_lseek>
 80089d0:	1c43      	adds	r3, r0, #1
 80089d2:	d102      	bne.n	80089da <_lseek_r+0x1e>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	b103      	cbz	r3, 80089da <_lseek_r+0x1e>
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	bd38      	pop	{r3, r4, r5, pc}
 80089dc:	200001bc 	.word	0x200001bc

080089e0 <_read_r>:
 80089e0:	b538      	push	{r3, r4, r5, lr}
 80089e2:	4d07      	ldr	r5, [pc, #28]	@ (8008a00 <_read_r+0x20>)
 80089e4:	4604      	mov	r4, r0
 80089e6:	4608      	mov	r0, r1
 80089e8:	4611      	mov	r1, r2
 80089ea:	2200      	movs	r2, #0
 80089ec:	602a      	str	r2, [r5, #0]
 80089ee:	461a      	mov	r2, r3
 80089f0:	f7ff fccc 	bl	800838c <_read>
 80089f4:	1c43      	adds	r3, r0, #1
 80089f6:	d102      	bne.n	80089fe <_read_r+0x1e>
 80089f8:	682b      	ldr	r3, [r5, #0]
 80089fa:	b103      	cbz	r3, 80089fe <_read_r+0x1e>
 80089fc:	6023      	str	r3, [r4, #0]
 80089fe:	bd38      	pop	{r3, r4, r5, pc}
 8008a00:	200001bc 	.word	0x200001bc

08008a04 <_write_r>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	4d07      	ldr	r5, [pc, #28]	@ (8008a24 <_write_r+0x20>)
 8008a08:	4604      	mov	r4, r0
 8008a0a:	4608      	mov	r0, r1
 8008a0c:	4611      	mov	r1, r2
 8008a0e:	2200      	movs	r2, #0
 8008a10:	602a      	str	r2, [r5, #0]
 8008a12:	461a      	mov	r2, r3
 8008a14:	f7ff fcd7 	bl	80083c6 <_write>
 8008a18:	1c43      	adds	r3, r0, #1
 8008a1a:	d102      	bne.n	8008a22 <_write_r+0x1e>
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	b103      	cbz	r3, 8008a22 <_write_r+0x1e>
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	200001bc 	.word	0x200001bc

08008a28 <__errno>:
 8008a28:	4b01      	ldr	r3, [pc, #4]	@ (8008a30 <__errno+0x8>)
 8008a2a:	6818      	ldr	r0, [r3, #0]
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	2000000c 	.word	0x2000000c

08008a34 <__libc_init_array>:
 8008a34:	b570      	push	{r4, r5, r6, lr}
 8008a36:	4d0d      	ldr	r5, [pc, #52]	@ (8008a6c <__libc_init_array+0x38>)
 8008a38:	4c0d      	ldr	r4, [pc, #52]	@ (8008a70 <__libc_init_array+0x3c>)
 8008a3a:	1b64      	subs	r4, r4, r5
 8008a3c:	10a4      	asrs	r4, r4, #2
 8008a3e:	2600      	movs	r6, #0
 8008a40:	42a6      	cmp	r6, r4
 8008a42:	d109      	bne.n	8008a58 <__libc_init_array+0x24>
 8008a44:	4d0b      	ldr	r5, [pc, #44]	@ (8008a74 <__libc_init_array+0x40>)
 8008a46:	4c0c      	ldr	r4, [pc, #48]	@ (8008a78 <__libc_init_array+0x44>)
 8008a48:	f000 fdb6 	bl	80095b8 <_init>
 8008a4c:	1b64      	subs	r4, r4, r5
 8008a4e:	10a4      	asrs	r4, r4, #2
 8008a50:	2600      	movs	r6, #0
 8008a52:	42a6      	cmp	r6, r4
 8008a54:	d105      	bne.n	8008a62 <__libc_init_array+0x2e>
 8008a56:	bd70      	pop	{r4, r5, r6, pc}
 8008a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a5c:	4798      	blx	r3
 8008a5e:	3601      	adds	r6, #1
 8008a60:	e7ee      	b.n	8008a40 <__libc_init_array+0xc>
 8008a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a66:	4798      	blx	r3
 8008a68:	3601      	adds	r6, #1
 8008a6a:	e7f2      	b.n	8008a52 <__libc_init_array+0x1e>
 8008a6c:	08009624 	.word	0x08009624
 8008a70:	08009624 	.word	0x08009624
 8008a74:	08009624 	.word	0x08009624
 8008a78:	08009628 	.word	0x08009628

08008a7c <__retarget_lock_init_recursive>:
 8008a7c:	4770      	bx	lr

08008a7e <__retarget_lock_acquire_recursive>:
 8008a7e:	4770      	bx	lr

08008a80 <__retarget_lock_release_recursive>:
 8008a80:	4770      	bx	lr
	...

08008a84 <_free_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	4605      	mov	r5, r0
 8008a88:	2900      	cmp	r1, #0
 8008a8a:	d041      	beq.n	8008b10 <_free_r+0x8c>
 8008a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a90:	1f0c      	subs	r4, r1, #4
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	bfb8      	it	lt
 8008a96:	18e4      	addlt	r4, r4, r3
 8008a98:	f000 f8e0 	bl	8008c5c <__malloc_lock>
 8008a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8008b14 <_free_r+0x90>)
 8008a9e:	6813      	ldr	r3, [r2, #0]
 8008aa0:	b933      	cbnz	r3, 8008ab0 <_free_r+0x2c>
 8008aa2:	6063      	str	r3, [r4, #4]
 8008aa4:	6014      	str	r4, [r2, #0]
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aac:	f000 b8dc 	b.w	8008c68 <__malloc_unlock>
 8008ab0:	42a3      	cmp	r3, r4
 8008ab2:	d908      	bls.n	8008ac6 <_free_r+0x42>
 8008ab4:	6820      	ldr	r0, [r4, #0]
 8008ab6:	1821      	adds	r1, r4, r0
 8008ab8:	428b      	cmp	r3, r1
 8008aba:	bf01      	itttt	eq
 8008abc:	6819      	ldreq	r1, [r3, #0]
 8008abe:	685b      	ldreq	r3, [r3, #4]
 8008ac0:	1809      	addeq	r1, r1, r0
 8008ac2:	6021      	streq	r1, [r4, #0]
 8008ac4:	e7ed      	b.n	8008aa2 <_free_r+0x1e>
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	b10b      	cbz	r3, 8008ad0 <_free_r+0x4c>
 8008acc:	42a3      	cmp	r3, r4
 8008ace:	d9fa      	bls.n	8008ac6 <_free_r+0x42>
 8008ad0:	6811      	ldr	r1, [r2, #0]
 8008ad2:	1850      	adds	r0, r2, r1
 8008ad4:	42a0      	cmp	r0, r4
 8008ad6:	d10b      	bne.n	8008af0 <_free_r+0x6c>
 8008ad8:	6820      	ldr	r0, [r4, #0]
 8008ada:	4401      	add	r1, r0
 8008adc:	1850      	adds	r0, r2, r1
 8008ade:	4283      	cmp	r3, r0
 8008ae0:	6011      	str	r1, [r2, #0]
 8008ae2:	d1e0      	bne.n	8008aa6 <_free_r+0x22>
 8008ae4:	6818      	ldr	r0, [r3, #0]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	6053      	str	r3, [r2, #4]
 8008aea:	4408      	add	r0, r1
 8008aec:	6010      	str	r0, [r2, #0]
 8008aee:	e7da      	b.n	8008aa6 <_free_r+0x22>
 8008af0:	d902      	bls.n	8008af8 <_free_r+0x74>
 8008af2:	230c      	movs	r3, #12
 8008af4:	602b      	str	r3, [r5, #0]
 8008af6:	e7d6      	b.n	8008aa6 <_free_r+0x22>
 8008af8:	6820      	ldr	r0, [r4, #0]
 8008afa:	1821      	adds	r1, r4, r0
 8008afc:	428b      	cmp	r3, r1
 8008afe:	bf04      	itt	eq
 8008b00:	6819      	ldreq	r1, [r3, #0]
 8008b02:	685b      	ldreq	r3, [r3, #4]
 8008b04:	6063      	str	r3, [r4, #4]
 8008b06:	bf04      	itt	eq
 8008b08:	1809      	addeq	r1, r1, r0
 8008b0a:	6021      	streq	r1, [r4, #0]
 8008b0c:	6054      	str	r4, [r2, #4]
 8008b0e:	e7ca      	b.n	8008aa6 <_free_r+0x22>
 8008b10:	bd38      	pop	{r3, r4, r5, pc}
 8008b12:	bf00      	nop
 8008b14:	200001c8 	.word	0x200001c8

08008b18 <sbrk_aligned>:
 8008b18:	b570      	push	{r4, r5, r6, lr}
 8008b1a:	4e0f      	ldr	r6, [pc, #60]	@ (8008b58 <sbrk_aligned+0x40>)
 8008b1c:	460c      	mov	r4, r1
 8008b1e:	6831      	ldr	r1, [r6, #0]
 8008b20:	4605      	mov	r5, r0
 8008b22:	b911      	cbnz	r1, 8008b2a <sbrk_aligned+0x12>
 8008b24:	f000 fcb4 	bl	8009490 <_sbrk_r>
 8008b28:	6030      	str	r0, [r6, #0]
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	f000 fcaf 	bl	8009490 <_sbrk_r>
 8008b32:	1c43      	adds	r3, r0, #1
 8008b34:	d103      	bne.n	8008b3e <sbrk_aligned+0x26>
 8008b36:	f04f 34ff 	mov.w	r4, #4294967295
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	bd70      	pop	{r4, r5, r6, pc}
 8008b3e:	1cc4      	adds	r4, r0, #3
 8008b40:	f024 0403 	bic.w	r4, r4, #3
 8008b44:	42a0      	cmp	r0, r4
 8008b46:	d0f8      	beq.n	8008b3a <sbrk_aligned+0x22>
 8008b48:	1a21      	subs	r1, r4, r0
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	f000 fca0 	bl	8009490 <_sbrk_r>
 8008b50:	3001      	adds	r0, #1
 8008b52:	d1f2      	bne.n	8008b3a <sbrk_aligned+0x22>
 8008b54:	e7ef      	b.n	8008b36 <sbrk_aligned+0x1e>
 8008b56:	bf00      	nop
 8008b58:	200001c4 	.word	0x200001c4

08008b5c <_malloc_r>:
 8008b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b60:	1ccd      	adds	r5, r1, #3
 8008b62:	f025 0503 	bic.w	r5, r5, #3
 8008b66:	3508      	adds	r5, #8
 8008b68:	2d0c      	cmp	r5, #12
 8008b6a:	bf38      	it	cc
 8008b6c:	250c      	movcc	r5, #12
 8008b6e:	2d00      	cmp	r5, #0
 8008b70:	4606      	mov	r6, r0
 8008b72:	db01      	blt.n	8008b78 <_malloc_r+0x1c>
 8008b74:	42a9      	cmp	r1, r5
 8008b76:	d904      	bls.n	8008b82 <_malloc_r+0x26>
 8008b78:	230c      	movs	r3, #12
 8008b7a:	6033      	str	r3, [r6, #0]
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c58 <_malloc_r+0xfc>
 8008b86:	f000 f869 	bl	8008c5c <__malloc_lock>
 8008b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b8e:	461c      	mov	r4, r3
 8008b90:	bb44      	cbnz	r4, 8008be4 <_malloc_r+0x88>
 8008b92:	4629      	mov	r1, r5
 8008b94:	4630      	mov	r0, r6
 8008b96:	f7ff ffbf 	bl	8008b18 <sbrk_aligned>
 8008b9a:	1c43      	adds	r3, r0, #1
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	d158      	bne.n	8008c52 <_malloc_r+0xf6>
 8008ba0:	f8d8 4000 	ldr.w	r4, [r8]
 8008ba4:	4627      	mov	r7, r4
 8008ba6:	2f00      	cmp	r7, #0
 8008ba8:	d143      	bne.n	8008c32 <_malloc_r+0xd6>
 8008baa:	2c00      	cmp	r4, #0
 8008bac:	d04b      	beq.n	8008c46 <_malloc_r+0xea>
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	4639      	mov	r1, r7
 8008bb2:	4630      	mov	r0, r6
 8008bb4:	eb04 0903 	add.w	r9, r4, r3
 8008bb8:	f000 fc6a 	bl	8009490 <_sbrk_r>
 8008bbc:	4581      	cmp	r9, r0
 8008bbe:	d142      	bne.n	8008c46 <_malloc_r+0xea>
 8008bc0:	6821      	ldr	r1, [r4, #0]
 8008bc2:	1a6d      	subs	r5, r5, r1
 8008bc4:	4629      	mov	r1, r5
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	f7ff ffa6 	bl	8008b18 <sbrk_aligned>
 8008bcc:	3001      	adds	r0, #1
 8008bce:	d03a      	beq.n	8008c46 <_malloc_r+0xea>
 8008bd0:	6823      	ldr	r3, [r4, #0]
 8008bd2:	442b      	add	r3, r5
 8008bd4:	6023      	str	r3, [r4, #0]
 8008bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8008bda:	685a      	ldr	r2, [r3, #4]
 8008bdc:	bb62      	cbnz	r2, 8008c38 <_malloc_r+0xdc>
 8008bde:	f8c8 7000 	str.w	r7, [r8]
 8008be2:	e00f      	b.n	8008c04 <_malloc_r+0xa8>
 8008be4:	6822      	ldr	r2, [r4, #0]
 8008be6:	1b52      	subs	r2, r2, r5
 8008be8:	d420      	bmi.n	8008c2c <_malloc_r+0xd0>
 8008bea:	2a0b      	cmp	r2, #11
 8008bec:	d917      	bls.n	8008c1e <_malloc_r+0xc2>
 8008bee:	1961      	adds	r1, r4, r5
 8008bf0:	42a3      	cmp	r3, r4
 8008bf2:	6025      	str	r5, [r4, #0]
 8008bf4:	bf18      	it	ne
 8008bf6:	6059      	strne	r1, [r3, #4]
 8008bf8:	6863      	ldr	r3, [r4, #4]
 8008bfa:	bf08      	it	eq
 8008bfc:	f8c8 1000 	streq.w	r1, [r8]
 8008c00:	5162      	str	r2, [r4, r5]
 8008c02:	604b      	str	r3, [r1, #4]
 8008c04:	4630      	mov	r0, r6
 8008c06:	f000 f82f 	bl	8008c68 <__malloc_unlock>
 8008c0a:	f104 000b 	add.w	r0, r4, #11
 8008c0e:	1d23      	adds	r3, r4, #4
 8008c10:	f020 0007 	bic.w	r0, r0, #7
 8008c14:	1ac2      	subs	r2, r0, r3
 8008c16:	bf1c      	itt	ne
 8008c18:	1a1b      	subne	r3, r3, r0
 8008c1a:	50a3      	strne	r3, [r4, r2]
 8008c1c:	e7af      	b.n	8008b7e <_malloc_r+0x22>
 8008c1e:	6862      	ldr	r2, [r4, #4]
 8008c20:	42a3      	cmp	r3, r4
 8008c22:	bf0c      	ite	eq
 8008c24:	f8c8 2000 	streq.w	r2, [r8]
 8008c28:	605a      	strne	r2, [r3, #4]
 8008c2a:	e7eb      	b.n	8008c04 <_malloc_r+0xa8>
 8008c2c:	4623      	mov	r3, r4
 8008c2e:	6864      	ldr	r4, [r4, #4]
 8008c30:	e7ae      	b.n	8008b90 <_malloc_r+0x34>
 8008c32:	463c      	mov	r4, r7
 8008c34:	687f      	ldr	r7, [r7, #4]
 8008c36:	e7b6      	b.n	8008ba6 <_malloc_r+0x4a>
 8008c38:	461a      	mov	r2, r3
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	42a3      	cmp	r3, r4
 8008c3e:	d1fb      	bne.n	8008c38 <_malloc_r+0xdc>
 8008c40:	2300      	movs	r3, #0
 8008c42:	6053      	str	r3, [r2, #4]
 8008c44:	e7de      	b.n	8008c04 <_malloc_r+0xa8>
 8008c46:	230c      	movs	r3, #12
 8008c48:	6033      	str	r3, [r6, #0]
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	f000 f80c 	bl	8008c68 <__malloc_unlock>
 8008c50:	e794      	b.n	8008b7c <_malloc_r+0x20>
 8008c52:	6005      	str	r5, [r0, #0]
 8008c54:	e7d6      	b.n	8008c04 <_malloc_r+0xa8>
 8008c56:	bf00      	nop
 8008c58:	200001c8 	.word	0x200001c8

08008c5c <__malloc_lock>:
 8008c5c:	4801      	ldr	r0, [pc, #4]	@ (8008c64 <__malloc_lock+0x8>)
 8008c5e:	f7ff bf0e 	b.w	8008a7e <__retarget_lock_acquire_recursive>
 8008c62:	bf00      	nop
 8008c64:	200001c0 	.word	0x200001c0

08008c68 <__malloc_unlock>:
 8008c68:	4801      	ldr	r0, [pc, #4]	@ (8008c70 <__malloc_unlock+0x8>)
 8008c6a:	f7ff bf09 	b.w	8008a80 <__retarget_lock_release_recursive>
 8008c6e:	bf00      	nop
 8008c70:	200001c0 	.word	0x200001c0

08008c74 <__sfputc_r>:
 8008c74:	6893      	ldr	r3, [r2, #8]
 8008c76:	3b01      	subs	r3, #1
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	b410      	push	{r4}
 8008c7c:	6093      	str	r3, [r2, #8]
 8008c7e:	da08      	bge.n	8008c92 <__sfputc_r+0x1e>
 8008c80:	6994      	ldr	r4, [r2, #24]
 8008c82:	42a3      	cmp	r3, r4
 8008c84:	db01      	blt.n	8008c8a <__sfputc_r+0x16>
 8008c86:	290a      	cmp	r1, #10
 8008c88:	d103      	bne.n	8008c92 <__sfputc_r+0x1e>
 8008c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c8e:	f000 bb6b 	b.w	8009368 <__swbuf_r>
 8008c92:	6813      	ldr	r3, [r2, #0]
 8008c94:	1c58      	adds	r0, r3, #1
 8008c96:	6010      	str	r0, [r2, #0]
 8008c98:	7019      	strb	r1, [r3, #0]
 8008c9a:	4608      	mov	r0, r1
 8008c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <__sfputs_r>:
 8008ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca4:	4606      	mov	r6, r0
 8008ca6:	460f      	mov	r7, r1
 8008ca8:	4614      	mov	r4, r2
 8008caa:	18d5      	adds	r5, r2, r3
 8008cac:	42ac      	cmp	r4, r5
 8008cae:	d101      	bne.n	8008cb4 <__sfputs_r+0x12>
 8008cb0:	2000      	movs	r0, #0
 8008cb2:	e007      	b.n	8008cc4 <__sfputs_r+0x22>
 8008cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cb8:	463a      	mov	r2, r7
 8008cba:	4630      	mov	r0, r6
 8008cbc:	f7ff ffda 	bl	8008c74 <__sfputc_r>
 8008cc0:	1c43      	adds	r3, r0, #1
 8008cc2:	d1f3      	bne.n	8008cac <__sfputs_r+0xa>
 8008cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008cc8 <_vfiprintf_r>:
 8008cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ccc:	460d      	mov	r5, r1
 8008cce:	b09d      	sub	sp, #116	@ 0x74
 8008cd0:	4614      	mov	r4, r2
 8008cd2:	4698      	mov	r8, r3
 8008cd4:	4606      	mov	r6, r0
 8008cd6:	b118      	cbz	r0, 8008ce0 <_vfiprintf_r+0x18>
 8008cd8:	6a03      	ldr	r3, [r0, #32]
 8008cda:	b90b      	cbnz	r3, 8008ce0 <_vfiprintf_r+0x18>
 8008cdc:	f7ff fdca 	bl	8008874 <__sinit>
 8008ce0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ce2:	07d9      	lsls	r1, r3, #31
 8008ce4:	d405      	bmi.n	8008cf2 <_vfiprintf_r+0x2a>
 8008ce6:	89ab      	ldrh	r3, [r5, #12]
 8008ce8:	059a      	lsls	r2, r3, #22
 8008cea:	d402      	bmi.n	8008cf2 <_vfiprintf_r+0x2a>
 8008cec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cee:	f7ff fec6 	bl	8008a7e <__retarget_lock_acquire_recursive>
 8008cf2:	89ab      	ldrh	r3, [r5, #12]
 8008cf4:	071b      	lsls	r3, r3, #28
 8008cf6:	d501      	bpl.n	8008cfc <_vfiprintf_r+0x34>
 8008cf8:	692b      	ldr	r3, [r5, #16]
 8008cfa:	b99b      	cbnz	r3, 8008d24 <_vfiprintf_r+0x5c>
 8008cfc:	4629      	mov	r1, r5
 8008cfe:	4630      	mov	r0, r6
 8008d00:	f000 fb70 	bl	80093e4 <__swsetup_r>
 8008d04:	b170      	cbz	r0, 8008d24 <_vfiprintf_r+0x5c>
 8008d06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d08:	07dc      	lsls	r4, r3, #31
 8008d0a:	d504      	bpl.n	8008d16 <_vfiprintf_r+0x4e>
 8008d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d10:	b01d      	add	sp, #116	@ 0x74
 8008d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d16:	89ab      	ldrh	r3, [r5, #12]
 8008d18:	0598      	lsls	r0, r3, #22
 8008d1a:	d4f7      	bmi.n	8008d0c <_vfiprintf_r+0x44>
 8008d1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d1e:	f7ff feaf 	bl	8008a80 <__retarget_lock_release_recursive>
 8008d22:	e7f3      	b.n	8008d0c <_vfiprintf_r+0x44>
 8008d24:	2300      	movs	r3, #0
 8008d26:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d28:	2320      	movs	r3, #32
 8008d2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d32:	2330      	movs	r3, #48	@ 0x30
 8008d34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ee4 <_vfiprintf_r+0x21c>
 8008d38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d3c:	f04f 0901 	mov.w	r9, #1
 8008d40:	4623      	mov	r3, r4
 8008d42:	469a      	mov	sl, r3
 8008d44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d48:	b10a      	cbz	r2, 8008d4e <_vfiprintf_r+0x86>
 8008d4a:	2a25      	cmp	r2, #37	@ 0x25
 8008d4c:	d1f9      	bne.n	8008d42 <_vfiprintf_r+0x7a>
 8008d4e:	ebba 0b04 	subs.w	fp, sl, r4
 8008d52:	d00b      	beq.n	8008d6c <_vfiprintf_r+0xa4>
 8008d54:	465b      	mov	r3, fp
 8008d56:	4622      	mov	r2, r4
 8008d58:	4629      	mov	r1, r5
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	f7ff ffa1 	bl	8008ca2 <__sfputs_r>
 8008d60:	3001      	adds	r0, #1
 8008d62:	f000 80a7 	beq.w	8008eb4 <_vfiprintf_r+0x1ec>
 8008d66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d68:	445a      	add	r2, fp
 8008d6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f000 809f 	beq.w	8008eb4 <_vfiprintf_r+0x1ec>
 8008d76:	2300      	movs	r3, #0
 8008d78:	f04f 32ff 	mov.w	r2, #4294967295
 8008d7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d80:	f10a 0a01 	add.w	sl, sl, #1
 8008d84:	9304      	str	r3, [sp, #16]
 8008d86:	9307      	str	r3, [sp, #28]
 8008d88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d8e:	4654      	mov	r4, sl
 8008d90:	2205      	movs	r2, #5
 8008d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d96:	4853      	ldr	r0, [pc, #332]	@ (8008ee4 <_vfiprintf_r+0x21c>)
 8008d98:	f7ff fa22 	bl	80081e0 <memchr>
 8008d9c:	9a04      	ldr	r2, [sp, #16]
 8008d9e:	b9d8      	cbnz	r0, 8008dd8 <_vfiprintf_r+0x110>
 8008da0:	06d1      	lsls	r1, r2, #27
 8008da2:	bf44      	itt	mi
 8008da4:	2320      	movmi	r3, #32
 8008da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008daa:	0713      	lsls	r3, r2, #28
 8008dac:	bf44      	itt	mi
 8008dae:	232b      	movmi	r3, #43	@ 0x2b
 8008db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008db4:	f89a 3000 	ldrb.w	r3, [sl]
 8008db8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dba:	d015      	beq.n	8008de8 <_vfiprintf_r+0x120>
 8008dbc:	9a07      	ldr	r2, [sp, #28]
 8008dbe:	4654      	mov	r4, sl
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	f04f 0c0a 	mov.w	ip, #10
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dcc:	3b30      	subs	r3, #48	@ 0x30
 8008dce:	2b09      	cmp	r3, #9
 8008dd0:	d94b      	bls.n	8008e6a <_vfiprintf_r+0x1a2>
 8008dd2:	b1b0      	cbz	r0, 8008e02 <_vfiprintf_r+0x13a>
 8008dd4:	9207      	str	r2, [sp, #28]
 8008dd6:	e014      	b.n	8008e02 <_vfiprintf_r+0x13a>
 8008dd8:	eba0 0308 	sub.w	r3, r0, r8
 8008ddc:	fa09 f303 	lsl.w	r3, r9, r3
 8008de0:	4313      	orrs	r3, r2
 8008de2:	9304      	str	r3, [sp, #16]
 8008de4:	46a2      	mov	sl, r4
 8008de6:	e7d2      	b.n	8008d8e <_vfiprintf_r+0xc6>
 8008de8:	9b03      	ldr	r3, [sp, #12]
 8008dea:	1d19      	adds	r1, r3, #4
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	9103      	str	r1, [sp, #12]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	bfbb      	ittet	lt
 8008df4:	425b      	neglt	r3, r3
 8008df6:	f042 0202 	orrlt.w	r2, r2, #2
 8008dfa:	9307      	strge	r3, [sp, #28]
 8008dfc:	9307      	strlt	r3, [sp, #28]
 8008dfe:	bfb8      	it	lt
 8008e00:	9204      	strlt	r2, [sp, #16]
 8008e02:	7823      	ldrb	r3, [r4, #0]
 8008e04:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e06:	d10a      	bne.n	8008e1e <_vfiprintf_r+0x156>
 8008e08:	7863      	ldrb	r3, [r4, #1]
 8008e0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e0c:	d132      	bne.n	8008e74 <_vfiprintf_r+0x1ac>
 8008e0e:	9b03      	ldr	r3, [sp, #12]
 8008e10:	1d1a      	adds	r2, r3, #4
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	9203      	str	r2, [sp, #12]
 8008e16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e1a:	3402      	adds	r4, #2
 8008e1c:	9305      	str	r3, [sp, #20]
 8008e1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ef4 <_vfiprintf_r+0x22c>
 8008e22:	7821      	ldrb	r1, [r4, #0]
 8008e24:	2203      	movs	r2, #3
 8008e26:	4650      	mov	r0, sl
 8008e28:	f7ff f9da 	bl	80081e0 <memchr>
 8008e2c:	b138      	cbz	r0, 8008e3e <_vfiprintf_r+0x176>
 8008e2e:	9b04      	ldr	r3, [sp, #16]
 8008e30:	eba0 000a 	sub.w	r0, r0, sl
 8008e34:	2240      	movs	r2, #64	@ 0x40
 8008e36:	4082      	lsls	r2, r0
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	3401      	adds	r4, #1
 8008e3c:	9304      	str	r3, [sp, #16]
 8008e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e42:	4829      	ldr	r0, [pc, #164]	@ (8008ee8 <_vfiprintf_r+0x220>)
 8008e44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e48:	2206      	movs	r2, #6
 8008e4a:	f7ff f9c9 	bl	80081e0 <memchr>
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	d03f      	beq.n	8008ed2 <_vfiprintf_r+0x20a>
 8008e52:	4b26      	ldr	r3, [pc, #152]	@ (8008eec <_vfiprintf_r+0x224>)
 8008e54:	bb1b      	cbnz	r3, 8008e9e <_vfiprintf_r+0x1d6>
 8008e56:	9b03      	ldr	r3, [sp, #12]
 8008e58:	3307      	adds	r3, #7
 8008e5a:	f023 0307 	bic.w	r3, r3, #7
 8008e5e:	3308      	adds	r3, #8
 8008e60:	9303      	str	r3, [sp, #12]
 8008e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e64:	443b      	add	r3, r7
 8008e66:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e68:	e76a      	b.n	8008d40 <_vfiprintf_r+0x78>
 8008e6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e6e:	460c      	mov	r4, r1
 8008e70:	2001      	movs	r0, #1
 8008e72:	e7a8      	b.n	8008dc6 <_vfiprintf_r+0xfe>
 8008e74:	2300      	movs	r3, #0
 8008e76:	3401      	adds	r4, #1
 8008e78:	9305      	str	r3, [sp, #20]
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	f04f 0c0a 	mov.w	ip, #10
 8008e80:	4620      	mov	r0, r4
 8008e82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e86:	3a30      	subs	r2, #48	@ 0x30
 8008e88:	2a09      	cmp	r2, #9
 8008e8a:	d903      	bls.n	8008e94 <_vfiprintf_r+0x1cc>
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d0c6      	beq.n	8008e1e <_vfiprintf_r+0x156>
 8008e90:	9105      	str	r1, [sp, #20]
 8008e92:	e7c4      	b.n	8008e1e <_vfiprintf_r+0x156>
 8008e94:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e98:	4604      	mov	r4, r0
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e7f0      	b.n	8008e80 <_vfiprintf_r+0x1b8>
 8008e9e:	ab03      	add	r3, sp, #12
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	462a      	mov	r2, r5
 8008ea4:	4b12      	ldr	r3, [pc, #72]	@ (8008ef0 <_vfiprintf_r+0x228>)
 8008ea6:	a904      	add	r1, sp, #16
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	f3af 8000 	nop.w
 8008eae:	4607      	mov	r7, r0
 8008eb0:	1c78      	adds	r0, r7, #1
 8008eb2:	d1d6      	bne.n	8008e62 <_vfiprintf_r+0x19a>
 8008eb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008eb6:	07d9      	lsls	r1, r3, #31
 8008eb8:	d405      	bmi.n	8008ec6 <_vfiprintf_r+0x1fe>
 8008eba:	89ab      	ldrh	r3, [r5, #12]
 8008ebc:	059a      	lsls	r2, r3, #22
 8008ebe:	d402      	bmi.n	8008ec6 <_vfiprintf_r+0x1fe>
 8008ec0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ec2:	f7ff fddd 	bl	8008a80 <__retarget_lock_release_recursive>
 8008ec6:	89ab      	ldrh	r3, [r5, #12]
 8008ec8:	065b      	lsls	r3, r3, #25
 8008eca:	f53f af1f 	bmi.w	8008d0c <_vfiprintf_r+0x44>
 8008ece:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ed0:	e71e      	b.n	8008d10 <_vfiprintf_r+0x48>
 8008ed2:	ab03      	add	r3, sp, #12
 8008ed4:	9300      	str	r3, [sp, #0]
 8008ed6:	462a      	mov	r2, r5
 8008ed8:	4b05      	ldr	r3, [pc, #20]	@ (8008ef0 <_vfiprintf_r+0x228>)
 8008eda:	a904      	add	r1, sp, #16
 8008edc:	4630      	mov	r0, r6
 8008ede:	f000 f879 	bl	8008fd4 <_printf_i>
 8008ee2:	e7e4      	b.n	8008eae <_vfiprintf_r+0x1e6>
 8008ee4:	080095e8 	.word	0x080095e8
 8008ee8:	080095f2 	.word	0x080095f2
 8008eec:	00000000 	.word	0x00000000
 8008ef0:	08008ca3 	.word	0x08008ca3
 8008ef4:	080095ee 	.word	0x080095ee

08008ef8 <_printf_common>:
 8008ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008efc:	4616      	mov	r6, r2
 8008efe:	4698      	mov	r8, r3
 8008f00:	688a      	ldr	r2, [r1, #8]
 8008f02:	690b      	ldr	r3, [r1, #16]
 8008f04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	bfb8      	it	lt
 8008f0c:	4613      	movlt	r3, r2
 8008f0e:	6033      	str	r3, [r6, #0]
 8008f10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f14:	4607      	mov	r7, r0
 8008f16:	460c      	mov	r4, r1
 8008f18:	b10a      	cbz	r2, 8008f1e <_printf_common+0x26>
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	6033      	str	r3, [r6, #0]
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	0699      	lsls	r1, r3, #26
 8008f22:	bf42      	ittt	mi
 8008f24:	6833      	ldrmi	r3, [r6, #0]
 8008f26:	3302      	addmi	r3, #2
 8008f28:	6033      	strmi	r3, [r6, #0]
 8008f2a:	6825      	ldr	r5, [r4, #0]
 8008f2c:	f015 0506 	ands.w	r5, r5, #6
 8008f30:	d106      	bne.n	8008f40 <_printf_common+0x48>
 8008f32:	f104 0a19 	add.w	sl, r4, #25
 8008f36:	68e3      	ldr	r3, [r4, #12]
 8008f38:	6832      	ldr	r2, [r6, #0]
 8008f3a:	1a9b      	subs	r3, r3, r2
 8008f3c:	42ab      	cmp	r3, r5
 8008f3e:	dc26      	bgt.n	8008f8e <_printf_common+0x96>
 8008f40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f44:	6822      	ldr	r2, [r4, #0]
 8008f46:	3b00      	subs	r3, #0
 8008f48:	bf18      	it	ne
 8008f4a:	2301      	movne	r3, #1
 8008f4c:	0692      	lsls	r2, r2, #26
 8008f4e:	d42b      	bmi.n	8008fa8 <_printf_common+0xb0>
 8008f50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f54:	4641      	mov	r1, r8
 8008f56:	4638      	mov	r0, r7
 8008f58:	47c8      	blx	r9
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	d01e      	beq.n	8008f9c <_printf_common+0xa4>
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	6922      	ldr	r2, [r4, #16]
 8008f62:	f003 0306 	and.w	r3, r3, #6
 8008f66:	2b04      	cmp	r3, #4
 8008f68:	bf02      	ittt	eq
 8008f6a:	68e5      	ldreq	r5, [r4, #12]
 8008f6c:	6833      	ldreq	r3, [r6, #0]
 8008f6e:	1aed      	subeq	r5, r5, r3
 8008f70:	68a3      	ldr	r3, [r4, #8]
 8008f72:	bf0c      	ite	eq
 8008f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f78:	2500      	movne	r5, #0
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	bfc4      	itt	gt
 8008f7e:	1a9b      	subgt	r3, r3, r2
 8008f80:	18ed      	addgt	r5, r5, r3
 8008f82:	2600      	movs	r6, #0
 8008f84:	341a      	adds	r4, #26
 8008f86:	42b5      	cmp	r5, r6
 8008f88:	d11a      	bne.n	8008fc0 <_printf_common+0xc8>
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	e008      	b.n	8008fa0 <_printf_common+0xa8>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	4652      	mov	r2, sl
 8008f92:	4641      	mov	r1, r8
 8008f94:	4638      	mov	r0, r7
 8008f96:	47c8      	blx	r9
 8008f98:	3001      	adds	r0, #1
 8008f9a:	d103      	bne.n	8008fa4 <_printf_common+0xac>
 8008f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fa4:	3501      	adds	r5, #1
 8008fa6:	e7c6      	b.n	8008f36 <_printf_common+0x3e>
 8008fa8:	18e1      	adds	r1, r4, r3
 8008faa:	1c5a      	adds	r2, r3, #1
 8008fac:	2030      	movs	r0, #48	@ 0x30
 8008fae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008fb2:	4422      	add	r2, r4
 8008fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008fb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008fbc:	3302      	adds	r3, #2
 8008fbe:	e7c7      	b.n	8008f50 <_printf_common+0x58>
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	4622      	mov	r2, r4
 8008fc4:	4641      	mov	r1, r8
 8008fc6:	4638      	mov	r0, r7
 8008fc8:	47c8      	blx	r9
 8008fca:	3001      	adds	r0, #1
 8008fcc:	d0e6      	beq.n	8008f9c <_printf_common+0xa4>
 8008fce:	3601      	adds	r6, #1
 8008fd0:	e7d9      	b.n	8008f86 <_printf_common+0x8e>
	...

08008fd4 <_printf_i>:
 8008fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd8:	7e0f      	ldrb	r7, [r1, #24]
 8008fda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008fdc:	2f78      	cmp	r7, #120	@ 0x78
 8008fde:	4691      	mov	r9, r2
 8008fe0:	4680      	mov	r8, r0
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	469a      	mov	sl, r3
 8008fe6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008fea:	d807      	bhi.n	8008ffc <_printf_i+0x28>
 8008fec:	2f62      	cmp	r7, #98	@ 0x62
 8008fee:	d80a      	bhi.n	8009006 <_printf_i+0x32>
 8008ff0:	2f00      	cmp	r7, #0
 8008ff2:	f000 80d1 	beq.w	8009198 <_printf_i+0x1c4>
 8008ff6:	2f58      	cmp	r7, #88	@ 0x58
 8008ff8:	f000 80b8 	beq.w	800916c <_printf_i+0x198>
 8008ffc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009000:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009004:	e03a      	b.n	800907c <_printf_i+0xa8>
 8009006:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800900a:	2b15      	cmp	r3, #21
 800900c:	d8f6      	bhi.n	8008ffc <_printf_i+0x28>
 800900e:	a101      	add	r1, pc, #4	@ (adr r1, 8009014 <_printf_i+0x40>)
 8009010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009014:	0800906d 	.word	0x0800906d
 8009018:	08009081 	.word	0x08009081
 800901c:	08008ffd 	.word	0x08008ffd
 8009020:	08008ffd 	.word	0x08008ffd
 8009024:	08008ffd 	.word	0x08008ffd
 8009028:	08008ffd 	.word	0x08008ffd
 800902c:	08009081 	.word	0x08009081
 8009030:	08008ffd 	.word	0x08008ffd
 8009034:	08008ffd 	.word	0x08008ffd
 8009038:	08008ffd 	.word	0x08008ffd
 800903c:	08008ffd 	.word	0x08008ffd
 8009040:	0800917f 	.word	0x0800917f
 8009044:	080090ab 	.word	0x080090ab
 8009048:	08009139 	.word	0x08009139
 800904c:	08008ffd 	.word	0x08008ffd
 8009050:	08008ffd 	.word	0x08008ffd
 8009054:	080091a1 	.word	0x080091a1
 8009058:	08008ffd 	.word	0x08008ffd
 800905c:	080090ab 	.word	0x080090ab
 8009060:	08008ffd 	.word	0x08008ffd
 8009064:	08008ffd 	.word	0x08008ffd
 8009068:	08009141 	.word	0x08009141
 800906c:	6833      	ldr	r3, [r6, #0]
 800906e:	1d1a      	adds	r2, r3, #4
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	6032      	str	r2, [r6, #0]
 8009074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009078:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800907c:	2301      	movs	r3, #1
 800907e:	e09c      	b.n	80091ba <_printf_i+0x1e6>
 8009080:	6833      	ldr	r3, [r6, #0]
 8009082:	6820      	ldr	r0, [r4, #0]
 8009084:	1d19      	adds	r1, r3, #4
 8009086:	6031      	str	r1, [r6, #0]
 8009088:	0606      	lsls	r6, r0, #24
 800908a:	d501      	bpl.n	8009090 <_printf_i+0xbc>
 800908c:	681d      	ldr	r5, [r3, #0]
 800908e:	e003      	b.n	8009098 <_printf_i+0xc4>
 8009090:	0645      	lsls	r5, r0, #25
 8009092:	d5fb      	bpl.n	800908c <_printf_i+0xb8>
 8009094:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009098:	2d00      	cmp	r5, #0
 800909a:	da03      	bge.n	80090a4 <_printf_i+0xd0>
 800909c:	232d      	movs	r3, #45	@ 0x2d
 800909e:	426d      	negs	r5, r5
 80090a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090a4:	4858      	ldr	r0, [pc, #352]	@ (8009208 <_printf_i+0x234>)
 80090a6:	230a      	movs	r3, #10
 80090a8:	e011      	b.n	80090ce <_printf_i+0xfa>
 80090aa:	6821      	ldr	r1, [r4, #0]
 80090ac:	6833      	ldr	r3, [r6, #0]
 80090ae:	0608      	lsls	r0, r1, #24
 80090b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80090b4:	d402      	bmi.n	80090bc <_printf_i+0xe8>
 80090b6:	0649      	lsls	r1, r1, #25
 80090b8:	bf48      	it	mi
 80090ba:	b2ad      	uxthmi	r5, r5
 80090bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80090be:	4852      	ldr	r0, [pc, #328]	@ (8009208 <_printf_i+0x234>)
 80090c0:	6033      	str	r3, [r6, #0]
 80090c2:	bf14      	ite	ne
 80090c4:	230a      	movne	r3, #10
 80090c6:	2308      	moveq	r3, #8
 80090c8:	2100      	movs	r1, #0
 80090ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80090ce:	6866      	ldr	r6, [r4, #4]
 80090d0:	60a6      	str	r6, [r4, #8]
 80090d2:	2e00      	cmp	r6, #0
 80090d4:	db05      	blt.n	80090e2 <_printf_i+0x10e>
 80090d6:	6821      	ldr	r1, [r4, #0]
 80090d8:	432e      	orrs	r6, r5
 80090da:	f021 0104 	bic.w	r1, r1, #4
 80090de:	6021      	str	r1, [r4, #0]
 80090e0:	d04b      	beq.n	800917a <_printf_i+0x1a6>
 80090e2:	4616      	mov	r6, r2
 80090e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80090e8:	fb03 5711 	mls	r7, r3, r1, r5
 80090ec:	5dc7      	ldrb	r7, [r0, r7]
 80090ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090f2:	462f      	mov	r7, r5
 80090f4:	42bb      	cmp	r3, r7
 80090f6:	460d      	mov	r5, r1
 80090f8:	d9f4      	bls.n	80090e4 <_printf_i+0x110>
 80090fa:	2b08      	cmp	r3, #8
 80090fc:	d10b      	bne.n	8009116 <_printf_i+0x142>
 80090fe:	6823      	ldr	r3, [r4, #0]
 8009100:	07df      	lsls	r7, r3, #31
 8009102:	d508      	bpl.n	8009116 <_printf_i+0x142>
 8009104:	6923      	ldr	r3, [r4, #16]
 8009106:	6861      	ldr	r1, [r4, #4]
 8009108:	4299      	cmp	r1, r3
 800910a:	bfde      	ittt	le
 800910c:	2330      	movle	r3, #48	@ 0x30
 800910e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009112:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009116:	1b92      	subs	r2, r2, r6
 8009118:	6122      	str	r2, [r4, #16]
 800911a:	f8cd a000 	str.w	sl, [sp]
 800911e:	464b      	mov	r3, r9
 8009120:	aa03      	add	r2, sp, #12
 8009122:	4621      	mov	r1, r4
 8009124:	4640      	mov	r0, r8
 8009126:	f7ff fee7 	bl	8008ef8 <_printf_common>
 800912a:	3001      	adds	r0, #1
 800912c:	d14a      	bne.n	80091c4 <_printf_i+0x1f0>
 800912e:	f04f 30ff 	mov.w	r0, #4294967295
 8009132:	b004      	add	sp, #16
 8009134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009138:	6823      	ldr	r3, [r4, #0]
 800913a:	f043 0320 	orr.w	r3, r3, #32
 800913e:	6023      	str	r3, [r4, #0]
 8009140:	4832      	ldr	r0, [pc, #200]	@ (800920c <_printf_i+0x238>)
 8009142:	2778      	movs	r7, #120	@ 0x78
 8009144:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009148:	6823      	ldr	r3, [r4, #0]
 800914a:	6831      	ldr	r1, [r6, #0]
 800914c:	061f      	lsls	r7, r3, #24
 800914e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009152:	d402      	bmi.n	800915a <_printf_i+0x186>
 8009154:	065f      	lsls	r7, r3, #25
 8009156:	bf48      	it	mi
 8009158:	b2ad      	uxthmi	r5, r5
 800915a:	6031      	str	r1, [r6, #0]
 800915c:	07d9      	lsls	r1, r3, #31
 800915e:	bf44      	itt	mi
 8009160:	f043 0320 	orrmi.w	r3, r3, #32
 8009164:	6023      	strmi	r3, [r4, #0]
 8009166:	b11d      	cbz	r5, 8009170 <_printf_i+0x19c>
 8009168:	2310      	movs	r3, #16
 800916a:	e7ad      	b.n	80090c8 <_printf_i+0xf4>
 800916c:	4826      	ldr	r0, [pc, #152]	@ (8009208 <_printf_i+0x234>)
 800916e:	e7e9      	b.n	8009144 <_printf_i+0x170>
 8009170:	6823      	ldr	r3, [r4, #0]
 8009172:	f023 0320 	bic.w	r3, r3, #32
 8009176:	6023      	str	r3, [r4, #0]
 8009178:	e7f6      	b.n	8009168 <_printf_i+0x194>
 800917a:	4616      	mov	r6, r2
 800917c:	e7bd      	b.n	80090fa <_printf_i+0x126>
 800917e:	6833      	ldr	r3, [r6, #0]
 8009180:	6825      	ldr	r5, [r4, #0]
 8009182:	6961      	ldr	r1, [r4, #20]
 8009184:	1d18      	adds	r0, r3, #4
 8009186:	6030      	str	r0, [r6, #0]
 8009188:	062e      	lsls	r6, r5, #24
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	d501      	bpl.n	8009192 <_printf_i+0x1be>
 800918e:	6019      	str	r1, [r3, #0]
 8009190:	e002      	b.n	8009198 <_printf_i+0x1c4>
 8009192:	0668      	lsls	r0, r5, #25
 8009194:	d5fb      	bpl.n	800918e <_printf_i+0x1ba>
 8009196:	8019      	strh	r1, [r3, #0]
 8009198:	2300      	movs	r3, #0
 800919a:	6123      	str	r3, [r4, #16]
 800919c:	4616      	mov	r6, r2
 800919e:	e7bc      	b.n	800911a <_printf_i+0x146>
 80091a0:	6833      	ldr	r3, [r6, #0]
 80091a2:	1d1a      	adds	r2, r3, #4
 80091a4:	6032      	str	r2, [r6, #0]
 80091a6:	681e      	ldr	r6, [r3, #0]
 80091a8:	6862      	ldr	r2, [r4, #4]
 80091aa:	2100      	movs	r1, #0
 80091ac:	4630      	mov	r0, r6
 80091ae:	f7ff f817 	bl	80081e0 <memchr>
 80091b2:	b108      	cbz	r0, 80091b8 <_printf_i+0x1e4>
 80091b4:	1b80      	subs	r0, r0, r6
 80091b6:	6060      	str	r0, [r4, #4]
 80091b8:	6863      	ldr	r3, [r4, #4]
 80091ba:	6123      	str	r3, [r4, #16]
 80091bc:	2300      	movs	r3, #0
 80091be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091c2:	e7aa      	b.n	800911a <_printf_i+0x146>
 80091c4:	6923      	ldr	r3, [r4, #16]
 80091c6:	4632      	mov	r2, r6
 80091c8:	4649      	mov	r1, r9
 80091ca:	4640      	mov	r0, r8
 80091cc:	47d0      	blx	sl
 80091ce:	3001      	adds	r0, #1
 80091d0:	d0ad      	beq.n	800912e <_printf_i+0x15a>
 80091d2:	6823      	ldr	r3, [r4, #0]
 80091d4:	079b      	lsls	r3, r3, #30
 80091d6:	d413      	bmi.n	8009200 <_printf_i+0x22c>
 80091d8:	68e0      	ldr	r0, [r4, #12]
 80091da:	9b03      	ldr	r3, [sp, #12]
 80091dc:	4298      	cmp	r0, r3
 80091de:	bfb8      	it	lt
 80091e0:	4618      	movlt	r0, r3
 80091e2:	e7a6      	b.n	8009132 <_printf_i+0x15e>
 80091e4:	2301      	movs	r3, #1
 80091e6:	4632      	mov	r2, r6
 80091e8:	4649      	mov	r1, r9
 80091ea:	4640      	mov	r0, r8
 80091ec:	47d0      	blx	sl
 80091ee:	3001      	adds	r0, #1
 80091f0:	d09d      	beq.n	800912e <_printf_i+0x15a>
 80091f2:	3501      	adds	r5, #1
 80091f4:	68e3      	ldr	r3, [r4, #12]
 80091f6:	9903      	ldr	r1, [sp, #12]
 80091f8:	1a5b      	subs	r3, r3, r1
 80091fa:	42ab      	cmp	r3, r5
 80091fc:	dcf2      	bgt.n	80091e4 <_printf_i+0x210>
 80091fe:	e7eb      	b.n	80091d8 <_printf_i+0x204>
 8009200:	2500      	movs	r5, #0
 8009202:	f104 0619 	add.w	r6, r4, #25
 8009206:	e7f5      	b.n	80091f4 <_printf_i+0x220>
 8009208:	080095f9 	.word	0x080095f9
 800920c:	0800960a 	.word	0x0800960a

08009210 <__sflush_r>:
 8009210:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009218:	0716      	lsls	r6, r2, #28
 800921a:	4605      	mov	r5, r0
 800921c:	460c      	mov	r4, r1
 800921e:	d454      	bmi.n	80092ca <__sflush_r+0xba>
 8009220:	684b      	ldr	r3, [r1, #4]
 8009222:	2b00      	cmp	r3, #0
 8009224:	dc02      	bgt.n	800922c <__sflush_r+0x1c>
 8009226:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009228:	2b00      	cmp	r3, #0
 800922a:	dd48      	ble.n	80092be <__sflush_r+0xae>
 800922c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800922e:	2e00      	cmp	r6, #0
 8009230:	d045      	beq.n	80092be <__sflush_r+0xae>
 8009232:	2300      	movs	r3, #0
 8009234:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009238:	682f      	ldr	r7, [r5, #0]
 800923a:	6a21      	ldr	r1, [r4, #32]
 800923c:	602b      	str	r3, [r5, #0]
 800923e:	d030      	beq.n	80092a2 <__sflush_r+0x92>
 8009240:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009242:	89a3      	ldrh	r3, [r4, #12]
 8009244:	0759      	lsls	r1, r3, #29
 8009246:	d505      	bpl.n	8009254 <__sflush_r+0x44>
 8009248:	6863      	ldr	r3, [r4, #4]
 800924a:	1ad2      	subs	r2, r2, r3
 800924c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800924e:	b10b      	cbz	r3, 8009254 <__sflush_r+0x44>
 8009250:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009252:	1ad2      	subs	r2, r2, r3
 8009254:	2300      	movs	r3, #0
 8009256:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009258:	6a21      	ldr	r1, [r4, #32]
 800925a:	4628      	mov	r0, r5
 800925c:	47b0      	blx	r6
 800925e:	1c43      	adds	r3, r0, #1
 8009260:	89a3      	ldrh	r3, [r4, #12]
 8009262:	d106      	bne.n	8009272 <__sflush_r+0x62>
 8009264:	6829      	ldr	r1, [r5, #0]
 8009266:	291d      	cmp	r1, #29
 8009268:	d82b      	bhi.n	80092c2 <__sflush_r+0xb2>
 800926a:	4a2a      	ldr	r2, [pc, #168]	@ (8009314 <__sflush_r+0x104>)
 800926c:	40ca      	lsrs	r2, r1
 800926e:	07d6      	lsls	r6, r2, #31
 8009270:	d527      	bpl.n	80092c2 <__sflush_r+0xb2>
 8009272:	2200      	movs	r2, #0
 8009274:	6062      	str	r2, [r4, #4]
 8009276:	04d9      	lsls	r1, r3, #19
 8009278:	6922      	ldr	r2, [r4, #16]
 800927a:	6022      	str	r2, [r4, #0]
 800927c:	d504      	bpl.n	8009288 <__sflush_r+0x78>
 800927e:	1c42      	adds	r2, r0, #1
 8009280:	d101      	bne.n	8009286 <__sflush_r+0x76>
 8009282:	682b      	ldr	r3, [r5, #0]
 8009284:	b903      	cbnz	r3, 8009288 <__sflush_r+0x78>
 8009286:	6560      	str	r0, [r4, #84]	@ 0x54
 8009288:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800928a:	602f      	str	r7, [r5, #0]
 800928c:	b1b9      	cbz	r1, 80092be <__sflush_r+0xae>
 800928e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009292:	4299      	cmp	r1, r3
 8009294:	d002      	beq.n	800929c <__sflush_r+0x8c>
 8009296:	4628      	mov	r0, r5
 8009298:	f7ff fbf4 	bl	8008a84 <_free_r>
 800929c:	2300      	movs	r3, #0
 800929e:	6363      	str	r3, [r4, #52]	@ 0x34
 80092a0:	e00d      	b.n	80092be <__sflush_r+0xae>
 80092a2:	2301      	movs	r3, #1
 80092a4:	4628      	mov	r0, r5
 80092a6:	47b0      	blx	r6
 80092a8:	4602      	mov	r2, r0
 80092aa:	1c50      	adds	r0, r2, #1
 80092ac:	d1c9      	bne.n	8009242 <__sflush_r+0x32>
 80092ae:	682b      	ldr	r3, [r5, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d0c6      	beq.n	8009242 <__sflush_r+0x32>
 80092b4:	2b1d      	cmp	r3, #29
 80092b6:	d001      	beq.n	80092bc <__sflush_r+0xac>
 80092b8:	2b16      	cmp	r3, #22
 80092ba:	d11e      	bne.n	80092fa <__sflush_r+0xea>
 80092bc:	602f      	str	r7, [r5, #0]
 80092be:	2000      	movs	r0, #0
 80092c0:	e022      	b.n	8009308 <__sflush_r+0xf8>
 80092c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092c6:	b21b      	sxth	r3, r3
 80092c8:	e01b      	b.n	8009302 <__sflush_r+0xf2>
 80092ca:	690f      	ldr	r7, [r1, #16]
 80092cc:	2f00      	cmp	r7, #0
 80092ce:	d0f6      	beq.n	80092be <__sflush_r+0xae>
 80092d0:	0793      	lsls	r3, r2, #30
 80092d2:	680e      	ldr	r6, [r1, #0]
 80092d4:	bf08      	it	eq
 80092d6:	694b      	ldreq	r3, [r1, #20]
 80092d8:	600f      	str	r7, [r1, #0]
 80092da:	bf18      	it	ne
 80092dc:	2300      	movne	r3, #0
 80092de:	eba6 0807 	sub.w	r8, r6, r7
 80092e2:	608b      	str	r3, [r1, #8]
 80092e4:	f1b8 0f00 	cmp.w	r8, #0
 80092e8:	dde9      	ble.n	80092be <__sflush_r+0xae>
 80092ea:	6a21      	ldr	r1, [r4, #32]
 80092ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80092ee:	4643      	mov	r3, r8
 80092f0:	463a      	mov	r2, r7
 80092f2:	4628      	mov	r0, r5
 80092f4:	47b0      	blx	r6
 80092f6:	2800      	cmp	r0, #0
 80092f8:	dc08      	bgt.n	800930c <__sflush_r+0xfc>
 80092fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009302:	81a3      	strh	r3, [r4, #12]
 8009304:	f04f 30ff 	mov.w	r0, #4294967295
 8009308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800930c:	4407      	add	r7, r0
 800930e:	eba8 0800 	sub.w	r8, r8, r0
 8009312:	e7e7      	b.n	80092e4 <__sflush_r+0xd4>
 8009314:	20400001 	.word	0x20400001

08009318 <_fflush_r>:
 8009318:	b538      	push	{r3, r4, r5, lr}
 800931a:	690b      	ldr	r3, [r1, #16]
 800931c:	4605      	mov	r5, r0
 800931e:	460c      	mov	r4, r1
 8009320:	b913      	cbnz	r3, 8009328 <_fflush_r+0x10>
 8009322:	2500      	movs	r5, #0
 8009324:	4628      	mov	r0, r5
 8009326:	bd38      	pop	{r3, r4, r5, pc}
 8009328:	b118      	cbz	r0, 8009332 <_fflush_r+0x1a>
 800932a:	6a03      	ldr	r3, [r0, #32]
 800932c:	b90b      	cbnz	r3, 8009332 <_fflush_r+0x1a>
 800932e:	f7ff faa1 	bl	8008874 <__sinit>
 8009332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d0f3      	beq.n	8009322 <_fflush_r+0xa>
 800933a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800933c:	07d0      	lsls	r0, r2, #31
 800933e:	d404      	bmi.n	800934a <_fflush_r+0x32>
 8009340:	0599      	lsls	r1, r3, #22
 8009342:	d402      	bmi.n	800934a <_fflush_r+0x32>
 8009344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009346:	f7ff fb9a 	bl	8008a7e <__retarget_lock_acquire_recursive>
 800934a:	4628      	mov	r0, r5
 800934c:	4621      	mov	r1, r4
 800934e:	f7ff ff5f 	bl	8009210 <__sflush_r>
 8009352:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009354:	07da      	lsls	r2, r3, #31
 8009356:	4605      	mov	r5, r0
 8009358:	d4e4      	bmi.n	8009324 <_fflush_r+0xc>
 800935a:	89a3      	ldrh	r3, [r4, #12]
 800935c:	059b      	lsls	r3, r3, #22
 800935e:	d4e1      	bmi.n	8009324 <_fflush_r+0xc>
 8009360:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009362:	f7ff fb8d 	bl	8008a80 <__retarget_lock_release_recursive>
 8009366:	e7dd      	b.n	8009324 <_fflush_r+0xc>

08009368 <__swbuf_r>:
 8009368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936a:	460e      	mov	r6, r1
 800936c:	4614      	mov	r4, r2
 800936e:	4605      	mov	r5, r0
 8009370:	b118      	cbz	r0, 800937a <__swbuf_r+0x12>
 8009372:	6a03      	ldr	r3, [r0, #32]
 8009374:	b90b      	cbnz	r3, 800937a <__swbuf_r+0x12>
 8009376:	f7ff fa7d 	bl	8008874 <__sinit>
 800937a:	69a3      	ldr	r3, [r4, #24]
 800937c:	60a3      	str	r3, [r4, #8]
 800937e:	89a3      	ldrh	r3, [r4, #12]
 8009380:	071a      	lsls	r2, r3, #28
 8009382:	d501      	bpl.n	8009388 <__swbuf_r+0x20>
 8009384:	6923      	ldr	r3, [r4, #16]
 8009386:	b943      	cbnz	r3, 800939a <__swbuf_r+0x32>
 8009388:	4621      	mov	r1, r4
 800938a:	4628      	mov	r0, r5
 800938c:	f000 f82a 	bl	80093e4 <__swsetup_r>
 8009390:	b118      	cbz	r0, 800939a <__swbuf_r+0x32>
 8009392:	f04f 37ff 	mov.w	r7, #4294967295
 8009396:	4638      	mov	r0, r7
 8009398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800939a:	6823      	ldr	r3, [r4, #0]
 800939c:	6922      	ldr	r2, [r4, #16]
 800939e:	1a98      	subs	r0, r3, r2
 80093a0:	6963      	ldr	r3, [r4, #20]
 80093a2:	b2f6      	uxtb	r6, r6
 80093a4:	4283      	cmp	r3, r0
 80093a6:	4637      	mov	r7, r6
 80093a8:	dc05      	bgt.n	80093b6 <__swbuf_r+0x4e>
 80093aa:	4621      	mov	r1, r4
 80093ac:	4628      	mov	r0, r5
 80093ae:	f7ff ffb3 	bl	8009318 <_fflush_r>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	d1ed      	bne.n	8009392 <__swbuf_r+0x2a>
 80093b6:	68a3      	ldr	r3, [r4, #8]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	60a3      	str	r3, [r4, #8]
 80093bc:	6823      	ldr	r3, [r4, #0]
 80093be:	1c5a      	adds	r2, r3, #1
 80093c0:	6022      	str	r2, [r4, #0]
 80093c2:	701e      	strb	r6, [r3, #0]
 80093c4:	6962      	ldr	r2, [r4, #20]
 80093c6:	1c43      	adds	r3, r0, #1
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d004      	beq.n	80093d6 <__swbuf_r+0x6e>
 80093cc:	89a3      	ldrh	r3, [r4, #12]
 80093ce:	07db      	lsls	r3, r3, #31
 80093d0:	d5e1      	bpl.n	8009396 <__swbuf_r+0x2e>
 80093d2:	2e0a      	cmp	r6, #10
 80093d4:	d1df      	bne.n	8009396 <__swbuf_r+0x2e>
 80093d6:	4621      	mov	r1, r4
 80093d8:	4628      	mov	r0, r5
 80093da:	f7ff ff9d 	bl	8009318 <_fflush_r>
 80093de:	2800      	cmp	r0, #0
 80093e0:	d0d9      	beq.n	8009396 <__swbuf_r+0x2e>
 80093e2:	e7d6      	b.n	8009392 <__swbuf_r+0x2a>

080093e4 <__swsetup_r>:
 80093e4:	b538      	push	{r3, r4, r5, lr}
 80093e6:	4b29      	ldr	r3, [pc, #164]	@ (800948c <__swsetup_r+0xa8>)
 80093e8:	4605      	mov	r5, r0
 80093ea:	6818      	ldr	r0, [r3, #0]
 80093ec:	460c      	mov	r4, r1
 80093ee:	b118      	cbz	r0, 80093f8 <__swsetup_r+0x14>
 80093f0:	6a03      	ldr	r3, [r0, #32]
 80093f2:	b90b      	cbnz	r3, 80093f8 <__swsetup_r+0x14>
 80093f4:	f7ff fa3e 	bl	8008874 <__sinit>
 80093f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093fc:	0719      	lsls	r1, r3, #28
 80093fe:	d422      	bmi.n	8009446 <__swsetup_r+0x62>
 8009400:	06da      	lsls	r2, r3, #27
 8009402:	d407      	bmi.n	8009414 <__swsetup_r+0x30>
 8009404:	2209      	movs	r2, #9
 8009406:	602a      	str	r2, [r5, #0]
 8009408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800940c:	81a3      	strh	r3, [r4, #12]
 800940e:	f04f 30ff 	mov.w	r0, #4294967295
 8009412:	e033      	b.n	800947c <__swsetup_r+0x98>
 8009414:	0758      	lsls	r0, r3, #29
 8009416:	d512      	bpl.n	800943e <__swsetup_r+0x5a>
 8009418:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800941a:	b141      	cbz	r1, 800942e <__swsetup_r+0x4a>
 800941c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009420:	4299      	cmp	r1, r3
 8009422:	d002      	beq.n	800942a <__swsetup_r+0x46>
 8009424:	4628      	mov	r0, r5
 8009426:	f7ff fb2d 	bl	8008a84 <_free_r>
 800942a:	2300      	movs	r3, #0
 800942c:	6363      	str	r3, [r4, #52]	@ 0x34
 800942e:	89a3      	ldrh	r3, [r4, #12]
 8009430:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009434:	81a3      	strh	r3, [r4, #12]
 8009436:	2300      	movs	r3, #0
 8009438:	6063      	str	r3, [r4, #4]
 800943a:	6923      	ldr	r3, [r4, #16]
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	89a3      	ldrh	r3, [r4, #12]
 8009440:	f043 0308 	orr.w	r3, r3, #8
 8009444:	81a3      	strh	r3, [r4, #12]
 8009446:	6923      	ldr	r3, [r4, #16]
 8009448:	b94b      	cbnz	r3, 800945e <__swsetup_r+0x7a>
 800944a:	89a3      	ldrh	r3, [r4, #12]
 800944c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009454:	d003      	beq.n	800945e <__swsetup_r+0x7a>
 8009456:	4621      	mov	r1, r4
 8009458:	4628      	mov	r0, r5
 800945a:	f000 f84f 	bl	80094fc <__smakebuf_r>
 800945e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009462:	f013 0201 	ands.w	r2, r3, #1
 8009466:	d00a      	beq.n	800947e <__swsetup_r+0x9a>
 8009468:	2200      	movs	r2, #0
 800946a:	60a2      	str	r2, [r4, #8]
 800946c:	6962      	ldr	r2, [r4, #20]
 800946e:	4252      	negs	r2, r2
 8009470:	61a2      	str	r2, [r4, #24]
 8009472:	6922      	ldr	r2, [r4, #16]
 8009474:	b942      	cbnz	r2, 8009488 <__swsetup_r+0xa4>
 8009476:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800947a:	d1c5      	bne.n	8009408 <__swsetup_r+0x24>
 800947c:	bd38      	pop	{r3, r4, r5, pc}
 800947e:	0799      	lsls	r1, r3, #30
 8009480:	bf58      	it	pl
 8009482:	6962      	ldrpl	r2, [r4, #20]
 8009484:	60a2      	str	r2, [r4, #8]
 8009486:	e7f4      	b.n	8009472 <__swsetup_r+0x8e>
 8009488:	2000      	movs	r0, #0
 800948a:	e7f7      	b.n	800947c <__swsetup_r+0x98>
 800948c:	2000000c 	.word	0x2000000c

08009490 <_sbrk_r>:
 8009490:	b538      	push	{r3, r4, r5, lr}
 8009492:	4d06      	ldr	r5, [pc, #24]	@ (80094ac <_sbrk_r+0x1c>)
 8009494:	2300      	movs	r3, #0
 8009496:	4604      	mov	r4, r0
 8009498:	4608      	mov	r0, r1
 800949a:	602b      	str	r3, [r5, #0]
 800949c:	f7fe ffe4 	bl	8008468 <_sbrk>
 80094a0:	1c43      	adds	r3, r0, #1
 80094a2:	d102      	bne.n	80094aa <_sbrk_r+0x1a>
 80094a4:	682b      	ldr	r3, [r5, #0]
 80094a6:	b103      	cbz	r3, 80094aa <_sbrk_r+0x1a>
 80094a8:	6023      	str	r3, [r4, #0]
 80094aa:	bd38      	pop	{r3, r4, r5, pc}
 80094ac:	200001bc 	.word	0x200001bc

080094b0 <__swhatbuf_r>:
 80094b0:	b570      	push	{r4, r5, r6, lr}
 80094b2:	460c      	mov	r4, r1
 80094b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b8:	2900      	cmp	r1, #0
 80094ba:	b096      	sub	sp, #88	@ 0x58
 80094bc:	4615      	mov	r5, r2
 80094be:	461e      	mov	r6, r3
 80094c0:	da0d      	bge.n	80094de <__swhatbuf_r+0x2e>
 80094c2:	89a3      	ldrh	r3, [r4, #12]
 80094c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80094c8:	f04f 0100 	mov.w	r1, #0
 80094cc:	bf14      	ite	ne
 80094ce:	2340      	movne	r3, #64	@ 0x40
 80094d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80094d4:	2000      	movs	r0, #0
 80094d6:	6031      	str	r1, [r6, #0]
 80094d8:	602b      	str	r3, [r5, #0]
 80094da:	b016      	add	sp, #88	@ 0x58
 80094dc:	bd70      	pop	{r4, r5, r6, pc}
 80094de:	466a      	mov	r2, sp
 80094e0:	f000 f848 	bl	8009574 <_fstat_r>
 80094e4:	2800      	cmp	r0, #0
 80094e6:	dbec      	blt.n	80094c2 <__swhatbuf_r+0x12>
 80094e8:	9901      	ldr	r1, [sp, #4]
 80094ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80094ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80094f2:	4259      	negs	r1, r3
 80094f4:	4159      	adcs	r1, r3
 80094f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80094fa:	e7eb      	b.n	80094d4 <__swhatbuf_r+0x24>

080094fc <__smakebuf_r>:
 80094fc:	898b      	ldrh	r3, [r1, #12]
 80094fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009500:	079d      	lsls	r5, r3, #30
 8009502:	4606      	mov	r6, r0
 8009504:	460c      	mov	r4, r1
 8009506:	d507      	bpl.n	8009518 <__smakebuf_r+0x1c>
 8009508:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800950c:	6023      	str	r3, [r4, #0]
 800950e:	6123      	str	r3, [r4, #16]
 8009510:	2301      	movs	r3, #1
 8009512:	6163      	str	r3, [r4, #20]
 8009514:	b003      	add	sp, #12
 8009516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009518:	ab01      	add	r3, sp, #4
 800951a:	466a      	mov	r2, sp
 800951c:	f7ff ffc8 	bl	80094b0 <__swhatbuf_r>
 8009520:	9f00      	ldr	r7, [sp, #0]
 8009522:	4605      	mov	r5, r0
 8009524:	4639      	mov	r1, r7
 8009526:	4630      	mov	r0, r6
 8009528:	f7ff fb18 	bl	8008b5c <_malloc_r>
 800952c:	b948      	cbnz	r0, 8009542 <__smakebuf_r+0x46>
 800952e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009532:	059a      	lsls	r2, r3, #22
 8009534:	d4ee      	bmi.n	8009514 <__smakebuf_r+0x18>
 8009536:	f023 0303 	bic.w	r3, r3, #3
 800953a:	f043 0302 	orr.w	r3, r3, #2
 800953e:	81a3      	strh	r3, [r4, #12]
 8009540:	e7e2      	b.n	8009508 <__smakebuf_r+0xc>
 8009542:	89a3      	ldrh	r3, [r4, #12]
 8009544:	6020      	str	r0, [r4, #0]
 8009546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800954a:	81a3      	strh	r3, [r4, #12]
 800954c:	9b01      	ldr	r3, [sp, #4]
 800954e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009552:	b15b      	cbz	r3, 800956c <__smakebuf_r+0x70>
 8009554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009558:	4630      	mov	r0, r6
 800955a:	f000 f81d 	bl	8009598 <_isatty_r>
 800955e:	b128      	cbz	r0, 800956c <__smakebuf_r+0x70>
 8009560:	89a3      	ldrh	r3, [r4, #12]
 8009562:	f023 0303 	bic.w	r3, r3, #3
 8009566:	f043 0301 	orr.w	r3, r3, #1
 800956a:	81a3      	strh	r3, [r4, #12]
 800956c:	89a3      	ldrh	r3, [r4, #12]
 800956e:	431d      	orrs	r5, r3
 8009570:	81a5      	strh	r5, [r4, #12]
 8009572:	e7cf      	b.n	8009514 <__smakebuf_r+0x18>

08009574 <_fstat_r>:
 8009574:	b538      	push	{r3, r4, r5, lr}
 8009576:	4d07      	ldr	r5, [pc, #28]	@ (8009594 <_fstat_r+0x20>)
 8009578:	2300      	movs	r3, #0
 800957a:	4604      	mov	r4, r0
 800957c:	4608      	mov	r0, r1
 800957e:	4611      	mov	r1, r2
 8009580:	602b      	str	r3, [r5, #0]
 8009582:	f7fe ff48 	bl	8008416 <_fstat>
 8009586:	1c43      	adds	r3, r0, #1
 8009588:	d102      	bne.n	8009590 <_fstat_r+0x1c>
 800958a:	682b      	ldr	r3, [r5, #0]
 800958c:	b103      	cbz	r3, 8009590 <_fstat_r+0x1c>
 800958e:	6023      	str	r3, [r4, #0]
 8009590:	bd38      	pop	{r3, r4, r5, pc}
 8009592:	bf00      	nop
 8009594:	200001bc 	.word	0x200001bc

08009598 <_isatty_r>:
 8009598:	b538      	push	{r3, r4, r5, lr}
 800959a:	4d06      	ldr	r5, [pc, #24]	@ (80095b4 <_isatty_r+0x1c>)
 800959c:	2300      	movs	r3, #0
 800959e:	4604      	mov	r4, r0
 80095a0:	4608      	mov	r0, r1
 80095a2:	602b      	str	r3, [r5, #0]
 80095a4:	f7fe ff47 	bl	8008436 <_isatty>
 80095a8:	1c43      	adds	r3, r0, #1
 80095aa:	d102      	bne.n	80095b2 <_isatty_r+0x1a>
 80095ac:	682b      	ldr	r3, [r5, #0]
 80095ae:	b103      	cbz	r3, 80095b2 <_isatty_r+0x1a>
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	bd38      	pop	{r3, r4, r5, pc}
 80095b4:	200001bc 	.word	0x200001bc

080095b8 <_init>:
 80095b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ba:	bf00      	nop
 80095bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095be:	bc08      	pop	{r3}
 80095c0:	469e      	mov	lr, r3
 80095c2:	4770      	bx	lr

080095c4 <_fini>:
 80095c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c6:	bf00      	nop
 80095c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ca:	bc08      	pop	{r3}
 80095cc:	469e      	mov	lr, r3
 80095ce:	4770      	bx	lr
